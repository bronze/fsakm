---
// Component props and imports can go here
export interface Props {}

const {} = Astro.props;
---

<button
    class="border-input bg-background text-foreground hover:bg-accent hover:text-accent-foreground relative flex h-9 w-9 items-center justify-center rounded-md border p-0 shadow-sm transition-colors"
    id="theme-toggle"
    aria-label="Toggle theme">
    <svg
        xmlns="http://www.w3.org/2000/svg"
        id="icon-sun"
        class="h-5 w-5 scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor">
        <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 3v1m0 16v1m8.66-8.66l-.71.71M4.05 4.05l-.71.71M21 12h-1M4 12H3m16.95 4.95l-.71-.71M6.34 17.66l-.71-.71M12 7a5 5 0 100 10 5 5 0 000-10z"
        ></path>
    </svg>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        id="icon-moon"
        class="absolute h-5 w-5 scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor">
        <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"></path>
    </svg>
</button>

<script>
    // Use client-side script with proper null checking
    const toggleButton = document.getElementById('theme-toggle');

    if (toggleButton) {
        toggleButton.addEventListener('click', () => {
            const isDark = document.documentElement.classList.contains('dark');
            const nextTheme = isDark ? 'light' : 'dark';
            document.dispatchEvent(new CustomEvent('set-theme', {detail: nextTheme}));
        });
    }
</script>
