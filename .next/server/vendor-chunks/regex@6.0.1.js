"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/regex@6.0.1";
exports.ids = ["vendor-chunks/regex@6.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atomic: () => (/* binding */ atomic),\n/* harmony export */   possessive: () => (/* binding */ possessive)\n/* harmony export */ });\n/* harmony import */ var _utils_internals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-internals.js */ \"(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js\");\n/* harmony import */ var regex_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regex-utilities */ \"(rsc)/./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js\");\n\n\n\nconst atomicPluginToken = new RegExp(String.raw`(?<noncapturingStart>${_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.noncapturingDelim})|(?<capturingStart>\\((?:\\?<[^>]+>)?)|\\\\?.`, 'gsu');\n\n/**\nApply transformations for atomic groups: `(?>â€¦)`.\n@param {string} expression\n@param {import('./regex.js').PluginData} [data]\n@returns {Required<import('./regex.js').PluginResult>}\n*/\nfunction atomic(expression, data) {\n  const hiddenCaptures = data?.hiddenCaptures ?? [];\n  // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>\n  let captureTransfers = data?.captureTransfers ?? new Map();\n  if (!/\\(\\?>/.test(expression)) {\n    return {\n      pattern: expression,\n      captureTransfers,\n      hiddenCaptures,\n    };\n  }\n\n  const aGDelim = '(?>';\n  const emulatedAGDelim = '(?:(?=(';\n  const captureNumMap = [0];\n  const addedHiddenCaptures = [];\n  let numCapturesBeforeAG = 0;\n  let numAGs = 0;\n  let aGPos = NaN;\n  let hasProcessedAG;\n  do {\n    hasProcessedAG = false;\n    let numCharClassesOpen = 0;\n    let numGroupsOpenInAG = 0;\n    let inAG = false;\n    let match;\n    atomicPluginToken.lastIndex = Number.isNaN(aGPos) ? 0 : aGPos + emulatedAGDelim.length;\n    while (match = atomicPluginToken.exec(expression)) {\n      const {0: m, index, groups: {capturingStart, noncapturingStart}} = match;\n      if (m === '[') {\n        numCharClassesOpen++;\n      } else if (!numCharClassesOpen) {\n\n        if (m === aGDelim && !inAG) {\n          aGPos = index;\n          inAG = true;\n        } else if (inAG && noncapturingStart) {\n          numGroupsOpenInAG++;\n        } else if (capturingStart) {\n          if (inAG) {\n            numGroupsOpenInAG++;\n          } else {\n            numCapturesBeforeAG++;\n            captureNumMap.push(numCapturesBeforeAG + numAGs);\n          }\n        } else if (m === ')' && inAG) {\n          if (!numGroupsOpenInAG) {\n            numAGs++;\n            const addedCaptureNum = numCapturesBeforeAG + numAGs;\n            // Replace `expression` and use `<$$N>` as a temporary wrapper for the backref so it\n            // can avoid backref renumbering afterward. Wrap the whole substitution (including the\n            // lookahead and following backref) in a noncapturing group to handle following\n            // quantifiers and literal digits\n            expression = `${expression.slice(0, aGPos)}${emulatedAGDelim}${\n                expression.slice(aGPos + aGDelim.length, index)\n              }))<$$${addedCaptureNum}>)${expression.slice(index + 1)}`;\n            hasProcessedAG = true;\n            addedHiddenCaptures.push(addedCaptureNum);\n            (0,_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.incrementIfAtLeast)(hiddenCaptures, addedCaptureNum);\n            if (captureTransfers.size) {\n              const newCaptureTransfers = new Map();\n              captureTransfers.forEach((from, to) => {\n                newCaptureTransfers.set(\n                  to >= addedCaptureNum ? to + 1 : to,\n                  from.map(f => f >= addedCaptureNum ? f + 1 : f)\n                );\n              });\n              captureTransfers = newCaptureTransfers;\n            }\n            break;\n          }\n          numGroupsOpenInAG--;\n        }\n\n      } else if (m === ']') {\n        numCharClassesOpen--;\n      }\n    }\n  // Start over from the beginning of the atomic group's contents, in case the processed group\n  // contains additional atomic groups\n  } while (hasProcessedAG);\n\n  hiddenCaptures.push(...addedHiddenCaptures);\n\n  // Second pass to adjust numbered backrefs\n  expression = (0,regex_utilities__WEBPACK_IMPORTED_MODULE_1__.replaceUnescaped)(\n    expression,\n    String.raw`\\\\(?<backrefNum>[1-9]\\d*)|<\\$\\$(?<wrappedBackrefNum>\\d+)>`,\n    ({0: m, groups: {backrefNum, wrappedBackrefNum}}) => {\n      if (backrefNum) {\n        const bNum = +backrefNum;\n        if (bNum > captureNumMap.length - 1) {\n          throw new Error(`Backref \"${m}\" greater than number of captures`);\n        }\n        return `\\\\${captureNumMap[bNum]}`;\n      }\n      return `\\\\${wrappedBackrefNum}`;\n    },\n    regex_utilities__WEBPACK_IMPORTED_MODULE_1__.Context.DEFAULT\n  );\n\n  return {\n    pattern: expression,\n    captureTransfers,\n    hiddenCaptures,\n  };\n}\n\nconst baseQuantifier = String.raw`(?:[?*+]|\\{\\d+(?:,\\d*)?\\})`;\n// Complete tokenizer for base syntax; doesn't (need to) know about character-class-only syntax\nconst possessivePluginToken = new RegExp(String.raw`\n\\\\(?: \\d+\n  | c[A-Za-z]\n  | [gk]<[^>]+>\n  | [pPu]\\{[^\\}]+\\}\n  | u[A-Fa-f\\d]{4}\n  | x[A-Fa-f\\d]{2}\n  )\n| \\((?: \\? (?: [:=!>]\n  | <(?:[=!]|[^>]+>)\n  | [A-Za-z\\-]+:\n  | \\(DEFINE\\)\n  ))?\n| (?<qBase>${baseQuantifier})(?<qMod>[?+]?)(?<invalidQ>[?*+\\{]?)\n| \\\\?.\n`.replace(/\\s+/g, ''), 'gsu');\n\n/**\nTransform posessive quantifiers into atomic groups. The posessessive quantifiers are:\n`?+`, `*+`, `++`, `{N}+`, `{N,}+`, `{N,N}+`.\nThis follows Java, PCRE, Perl, and Python.\nPossessive quantifiers in Oniguruma and Onigmo are only: `?+`, `*+`, `++`.\n@param {string} expression\n@returns {import('./regex.js').PluginResult}\n*/\nfunction possessive(expression) {\n  if (!(new RegExp(`${baseQuantifier}\\\\+`).test(expression))) {\n    return {\n      pattern: expression,\n    };\n  }\n\n  const openGroupIndices = [];\n  let lastGroupIndex = null;\n  let lastCharClassIndex = null;\n  let lastToken = '';\n  let numCharClassesOpen = 0;\n  let match;\n  possessivePluginToken.lastIndex = 0;\n  while (match = possessivePluginToken.exec(expression)) {\n    const {0: m, index, groups: {qBase, qMod, invalidQ}} = match;\n    if (m === '[') {\n      if (!numCharClassesOpen) {\n        lastCharClassIndex = index;\n      }\n      numCharClassesOpen++;\n    } else if (m === ']') {\n      if (numCharClassesOpen) {\n        numCharClassesOpen--;\n      // Unmatched `]`\n      } else {\n        lastCharClassIndex = null;\n      }\n    } else if (!numCharClassesOpen) {\n\n      if (qMod === '+' && lastToken && !lastToken.startsWith('(')) {\n        // Invalid following quantifier would become valid via the wrapping group\n        if (invalidQ) {\n          throw new Error(`Invalid quantifier \"${m}\"`);\n        }\n        let charsAdded = -1; // -1 for removed trailing `+`\n        // Possessivizing fixed repetition quantifiers like `{2}` does't change their behavior, so\n        // avoid doing so (convert them to greedy)\n        if (/^\\{\\d+\\}$/.test(qBase)) {\n          expression = (0,_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.spliceStr)(expression, index + qBase.length, qMod, '');\n        } else {\n          if (lastToken === ')' || lastToken === ']') {\n            const nodeIndex = lastToken === ')' ? lastGroupIndex : lastCharClassIndex;\n            // Unmatched `)` would break out of the wrapping group and mess with handling.\n            // Unmatched `]` wouldn't be a problem, but it's unnecessary to have dedicated support\n            // for unescaped `]++` since this won't work with flag u or v anyway\n            if (nodeIndex === null) {\n              throw new Error(`Invalid unmatched \"${lastToken}\"`);\n            }\n            expression = `${expression.slice(0, nodeIndex)}(?>${expression.slice(nodeIndex, index)}${qBase})${expression.slice(index + m.length)}`;\n          } else {\n            expression = `${expression.slice(0, index - lastToken.length)}(?>${lastToken}${qBase})${expression.slice(index + m.length)}`;\n          }\n          charsAdded += 4; // `(?>)`\n        }\n        possessivePluginToken.lastIndex += charsAdded;\n      } else if (m[0] === '(') {\n        openGroupIndices.push(index);\n      } else if (m === ')') {\n        lastGroupIndex = openGroupIndices.length ? openGroupIndices.pop() : null;\n      }\n\n    }\n    lastToken = m;\n  }\n\n  return {\n    pattern: expression,\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegExpSubclass: () => (/* reexport safe */ _subclass_js__WEBPACK_IMPORTED_MODULE_1__.RegExpSubclass),\n/* harmony export */   atomic: () => (/* reexport safe */ _atomic_js__WEBPACK_IMPORTED_MODULE_0__.atomic),\n/* harmony export */   possessive: () => (/* reexport safe */ _atomic_js__WEBPACK_IMPORTED_MODULE_0__.possessive)\n/* harmony export */ });\n/* harmony import */ var _atomic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.js */ \"(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js\");\n/* harmony import */ var _subclass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subclass.js */ \"(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnZXhANi4wLjEvbm9kZV9tb2R1bGVzL3JlZ2V4L3NyYy9pbnRlcm5hbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvYnJvbnplL2NvZGluZy9mc2FrbS9ub2RlX21vZHVsZXMvLnBucG0vcmVnZXhANi4wLjEvbm9kZV9tb2R1bGVzL3JlZ2V4L3NyYy9pbnRlcm5hbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHthdG9taWMsIHBvc3Nlc3NpdmV9IGZyb20gJy4vYXRvbWljLmpzJztcbmV4cG9ydCB7UmVnRXhwU3ViY2xhc3N9IGZyb20gJy4vc3ViY2xhc3MuanMnO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegExpSubclass: () => (/* binding */ RegExpSubclass)\n/* harmony export */ });\n/**\nWorks the same as JavaScript's native `RegExp` constructor in all contexts, but automatically\nadjusts subpattern matches and indices (with flag `d`) to account for captures added as part of\nemulating extended syntax.\n*/\nclass RegExpSubclass extends RegExp {\n  // Avoid `#private` to allow for subclassing\n  /**\n  @private\n  @type {Map<number, {\n    hidden: true;\n  }>}\n  */\n  _captureMap;\n  /**\n  @overload\n  @param {string} expression\n  @param {string} [flags]\n  @param {{\n    hiddenCaptures?: Array<number>;\n  }} [options]\n  */\n  /**\n  @overload\n  @param {RegExpSubclass} expression\n  @param {string} [flags]\n  */\n  constructor(expression, flags, options) {\n    // Argument `options` isn't provided when regexes are copied via `new RegExpSubclass(regexp)`,\n    // including as part of the internal handling of string methods `matchAll` and `split`\n    if (expression instanceof RegExp) {\n      if (options) {\n        throw new Error('Cannot provide options when copying a regexp');\n      }\n      super(expression, flags);\n      if (expression instanceof RegExpSubclass) {\n        this._captureMap = expression._captureMap;\n      } else {\n        this._captureMap = new Map();\n      }\n    } else {\n      super(expression, flags);\n      const hiddenCaptures = options?.hiddenCaptures ?? [];\n      this._captureMap = createCaptureMap(hiddenCaptures);\n    }\n  }\n  /**\n  Called internally by all String/RegExp methods that use regexes.\n  @override\n  @param {string} str\n  @returns {RegExpExecArray | null}\n  */\n  exec(str) {\n    const match = super.exec(str);\n    if (!match || !this._captureMap.size) {\n      return match;\n    }\n    const matchCopy = [...match];\n    // Empty all but the first value of the array while preserving its other properties\n    match.length = 1;\n    let indicesCopy;\n    if (this.hasIndices) {\n      indicesCopy = [...match.indices];\n      match.indices.length = 1;\n    }\n    for (let i = 1; i < matchCopy.length; i++) {\n      if (!this._captureMap.get(i)?.hidden) {\n        match.push(matchCopy[i]);\n        if (this.hasIndices) {\n          match.indices.push(indicesCopy[i]);\n        }\n      }\n    }\n    return match;\n  }\n}\n\n/**\nBuild the capturing group map, with hidden captures marked to indicate their submatches shouldn't\nappear in match results.\n@param {Array<number>} hiddenCaptures\n@returns {Map<number, {\n  hidden: true;\n}>}\n*/\nfunction createCaptureMap(hiddenCaptures) {\n  const captureMap = new Map();\n  for (const num of hiddenCaptures) {\n    captureMap.set(num, {\n      hidden: true,\n    });\n  }\n  return captureMap;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnZXhANi4wLjEvbm9kZV9tb2R1bGVzL3JlZ2V4L3NyYy9zdWJjbGFzcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCLFVBQVUsUUFBUTtBQUNsQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCO0FBQzFCLFVBQVUsUUFBUTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUTtBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxlQUFlO0FBQ3ZCLFVBQVU7QUFDVjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUlFIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleEA2LjAuMS9ub2RlX21vZHVsZXMvcmVnZXgvc3JjL3N1YmNsYXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuV29ya3MgdGhlIHNhbWUgYXMgSmF2YVNjcmlwdCdzIG5hdGl2ZSBgUmVnRXhwYCBjb25zdHJ1Y3RvciBpbiBhbGwgY29udGV4dHMsIGJ1dCBhdXRvbWF0aWNhbGx5XG5hZGp1c3RzIHN1YnBhdHRlcm4gbWF0Y2hlcyBhbmQgaW5kaWNlcyAod2l0aCBmbGFnIGBkYCkgdG8gYWNjb3VudCBmb3IgY2FwdHVyZXMgYWRkZWQgYXMgcGFydCBvZlxuZW11bGF0aW5nIGV4dGVuZGVkIHN5bnRheC5cbiovXG5jbGFzcyBSZWdFeHBTdWJjbGFzcyBleHRlbmRzIFJlZ0V4cCB7XG4gIC8vIEF2b2lkIGAjcHJpdmF0ZWAgdG8gYWxsb3cgZm9yIHN1YmNsYXNzaW5nXG4gIC8qKlxuICBAcHJpdmF0ZVxuICBAdHlwZSB7TWFwPG51bWJlciwge1xuICAgIGhpZGRlbjogdHJ1ZTtcbiAgfT59XG4gICovXG4gIF9jYXB0dXJlTWFwO1xuICAvKipcbiAgQG92ZXJsb2FkXG4gIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uXG4gIEBwYXJhbSB7c3RyaW5nfSBbZmxhZ3NdXG4gIEBwYXJhbSB7e1xuICAgIGhpZGRlbkNhcHR1cmVzPzogQXJyYXk8bnVtYmVyPjtcbiAgfX0gW29wdGlvbnNdXG4gICovXG4gIC8qKlxuICBAb3ZlcmxvYWRcbiAgQHBhcmFtIHtSZWdFeHBTdWJjbGFzc30gZXhwcmVzc2lvblxuICBAcGFyYW0ge3N0cmluZ30gW2ZsYWdzXVxuICAqL1xuICBjb25zdHJ1Y3RvcihleHByZXNzaW9uLCBmbGFncywgb3B0aW9ucykge1xuICAgIC8vIEFyZ3VtZW50IGBvcHRpb25zYCBpc24ndCBwcm92aWRlZCB3aGVuIHJlZ2V4ZXMgYXJlIGNvcGllZCB2aWEgYG5ldyBSZWdFeHBTdWJjbGFzcyhyZWdleHApYCxcbiAgICAvLyBpbmNsdWRpbmcgYXMgcGFydCBvZiB0aGUgaW50ZXJuYWwgaGFuZGxpbmcgb2Ygc3RyaW5nIG1ldGhvZHMgYG1hdGNoQWxsYCBhbmQgYHNwbGl0YFxuICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwcm92aWRlIG9wdGlvbnMgd2hlbiBjb3B5aW5nIGEgcmVnZXhwJyk7XG4gICAgICB9XG4gICAgICBzdXBlcihleHByZXNzaW9uLCBmbGFncyk7XG4gICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cFN1YmNsYXNzKSB7XG4gICAgICAgIHRoaXMuX2NhcHR1cmVNYXAgPSBleHByZXNzaW9uLl9jYXB0dXJlTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FwdHVyZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIoZXhwcmVzc2lvbiwgZmxhZ3MpO1xuICAgICAgY29uc3QgaGlkZGVuQ2FwdHVyZXMgPSBvcHRpb25zPy5oaWRkZW5DYXB0dXJlcyA/PyBbXTtcbiAgICAgIHRoaXMuX2NhcHR1cmVNYXAgPSBjcmVhdGVDYXB0dXJlTWFwKGhpZGRlbkNhcHR1cmVzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gIENhbGxlZCBpbnRlcm5hbGx5IGJ5IGFsbCBTdHJpbmcvUmVnRXhwIG1ldGhvZHMgdGhhdCB1c2UgcmVnZXhlcy5cbiAgQG92ZXJyaWRlXG4gIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgQHJldHVybnMge1JlZ0V4cEV4ZWNBcnJheSB8IG51bGx9XG4gICovXG4gIGV4ZWMoc3RyKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdXBlci5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaCB8fCAhdGhpcy5fY2FwdHVyZU1hcC5zaXplKSB7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoQ29weSA9IFsuLi5tYXRjaF07XG4gICAgLy8gRW1wdHkgYWxsIGJ1dCB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIGFycmF5IHdoaWxlIHByZXNlcnZpbmcgaXRzIG90aGVyIHByb3BlcnRpZXNcbiAgICBtYXRjaC5sZW5ndGggPSAxO1xuICAgIGxldCBpbmRpY2VzQ29weTtcbiAgICBpZiAodGhpcy5oYXNJbmRpY2VzKSB7XG4gICAgICBpbmRpY2VzQ29weSA9IFsuLi5tYXRjaC5pbmRpY2VzXTtcbiAgICAgIG1hdGNoLmluZGljZXMubGVuZ3RoID0gMTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXRjaENvcHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5fY2FwdHVyZU1hcC5nZXQoaSk/LmhpZGRlbikge1xuICAgICAgICBtYXRjaC5wdXNoKG1hdGNoQ29weVtpXSk7XG4gICAgICAgIGlmICh0aGlzLmhhc0luZGljZXMpIHtcbiAgICAgICAgICBtYXRjaC5pbmRpY2VzLnB1c2goaW5kaWNlc0NvcHlbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaDtcbiAgfVxufVxuXG4vKipcbkJ1aWxkIHRoZSBjYXB0dXJpbmcgZ3JvdXAgbWFwLCB3aXRoIGhpZGRlbiBjYXB0dXJlcyBtYXJrZWQgdG8gaW5kaWNhdGUgdGhlaXIgc3VibWF0Y2hlcyBzaG91bGRuJ3RcbmFwcGVhciBpbiBtYXRjaCByZXN1bHRzLlxuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBoaWRkZW5DYXB0dXJlc1xuQHJldHVybnMge01hcDxudW1iZXIsIHtcbiAgaGlkZGVuOiB0cnVlO1xufT59XG4qL1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZU1hcChoaWRkZW5DYXB0dXJlcykge1xuICBjb25zdCBjYXB0dXJlTWFwID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IG51bSBvZiBoaWRkZW5DYXB0dXJlcykge1xuICAgIGNhcHR1cmVNYXAuc2V0KG51bSwge1xuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBjYXB0dXJlTWFwO1xufVxuXG5leHBvcnQge1xuICBSZWdFeHBTdWJjbGFzcyxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incrementIfAtLeast: () => (/* binding */ incrementIfAtLeast),\n/* harmony export */   noncapturingDelim: () => (/* binding */ noncapturingDelim),\n/* harmony export */   spliceStr: () => (/* binding */ spliceStr)\n/* harmony export */ });\n// Separating some utils for improved tree shaking of the `./internals` export\n\nconst noncapturingDelim = String.raw`\\(\\?(?:[:=!>A-Za-z\\-]|<[=!]|\\(DEFINE\\))`;\n\n/**\nUpdates the array in place by incrementing each value greater than or equal to the threshold.\n@param {Array<number>} arr\n@param {number} threshold\n*/\nfunction incrementIfAtLeast(arr, threshold) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= threshold) {\n      arr[i]++;\n    }\n  }\n}\n\n/**\n@param {string} str\n@param {number} pos\n@param {string} oldValue\n@param {string} newValue\n@returns {string}\n*/\nfunction spliceStr(str, pos, oldValue, newValue) {\n  return str.slice(0, pos) + newValue + str.slice(pos + oldValue.length);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnZXhANi4wLjEvbm9kZV9tb2R1bGVzL3JlZ2V4L3NyYy91dGlscy1pbnRlcm5hbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVEsZUFBZTtBQUN2QixRQUFRLFFBQVE7QUFDaEI7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsUUFBUTtBQUNoQixRQUFRLFFBQVE7QUFDaEIsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsUUFBUTtBQUNoQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBTUUiLCJzb3VyY2VzIjpbIi9ob21lL2Jyb256ZS9jb2RpbmcvZnNha20vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2V4QDYuMC4xL25vZGVfbW9kdWxlcy9yZWdleC9zcmMvdXRpbHMtaW50ZXJuYWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcGFyYXRpbmcgc29tZSB1dGlscyBmb3IgaW1wcm92ZWQgdHJlZSBzaGFraW5nIG9mIHRoZSBgLi9pbnRlcm5hbHNgIGV4cG9ydFxuXG5jb25zdCBub25jYXB0dXJpbmdEZWxpbSA9IFN0cmluZy5yYXdgXFwoXFw/KD86Wzo9IT5BLVphLXpcXC1dfDxbPSFdfFxcKERFRklORVxcKSlgO1xuXG4vKipcblVwZGF0ZXMgdGhlIGFycmF5IGluIHBsYWNlIGJ5IGluY3JlbWVudGluZyBlYWNoIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhyZXNob2xkLlxuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJcbkBwYXJhbSB7bnVtYmVyfSB0aHJlc2hvbGRcbiovXG5mdW5jdGlvbiBpbmNyZW1lbnRJZkF0TGVhc3QoYXJyLCB0aHJlc2hvbGQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldID49IHRocmVzaG9sZCkge1xuICAgICAgYXJyW2ldKys7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuQHBhcmFtIHtzdHJpbmd9IHN0clxuQHBhcmFtIHtudW1iZXJ9IHBvc1xuQHBhcmFtIHtzdHJpbmd9IG9sZFZhbHVlXG5AcGFyYW0ge3N0cmluZ30gbmV3VmFsdWVcbkByZXR1cm5zIHtzdHJpbmd9XG4qL1xuZnVuY3Rpb24gc3BsaWNlU3RyKHN0ciwgcG9zLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBwb3MpICsgbmV3VmFsdWUgKyBzdHIuc2xpY2UocG9zICsgb2xkVmFsdWUubGVuZ3RoKTtcbn1cblxuZXhwb3J0IHtcbiAgaW5jcmVtZW50SWZBdExlYXN0LFxuICBub25jYXB0dXJpbmdEZWxpbSxcbiAgc3BsaWNlU3RyLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js\n");

/***/ })

};
;