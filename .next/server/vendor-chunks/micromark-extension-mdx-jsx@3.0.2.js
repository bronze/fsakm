"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-mdx-jsx@3.0.2";
exports.ids = ["vendor-chunks/micromark-extension-mdx-jsx@3.0.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryTag: () => (/* binding */ factoryTag)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-mdx-expression */ \"(rsc)/./node_modules/.pnpm/micromark-factory-mdx-expression@2.0.3/node_modules/micromark-factory-mdx-expression/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vfile-message */ \"(rsc)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @import {AcornOptions, Acorn} from 'micromark-util-events-to-acorn'\n * @import {Code, Effects, State, TokenType, TokenizeContext} from 'micromark-util-types'\n */\n\n\n\n\n\n\n\n\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | null | undefined} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {boolean | null | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nfunction factoryTag(\n  effects,\n  ok,\n  nok,\n  acorn,\n  acornOptions,\n  addResult,\n  allowLazy,\n  tagType,\n  tagMarkerType,\n  tagClosingMarkerType,\n  tagSelfClosingMarker,\n  tagNameType,\n  tagNamePrimaryType,\n  tagNameMemberMarkerType,\n  tagNameMemberType,\n  tagNamePrefixMarkerType,\n  tagNameLocalType,\n  tagExpressionAttributeType,\n  tagExpressionAttributeMarkerType,\n  tagExpressionAttributeValueType,\n  tagAttributeType,\n  tagAttributeNameType,\n  tagAttributeNamePrimaryType,\n  tagAttributeNamePrefixMarkerType,\n  tagAttributeNameLocalType,\n  tagAttributeInitializerMarkerType,\n  tagAttributeValueLiteralType,\n  tagAttributeValueLiteralMarkerType,\n  tagAttributeValueLiteralValueType,\n  tagAttributeValueExpressionType,\n  tagAttributeValueExpressionMarkerType,\n  tagAttributeValueExpressionValueType\n) {\n  const self = this\n  /** @type {State} */\n  let returnState\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n\n  return start\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n    effects.enter(tagType)\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    return startAfter\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code)) {\n      return nok(code)\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagClosingMarkerType)\n      effects.consume(code)\n      effects.exit(tagClosingMarkerType)\n      returnState = closingTagNameBefore\n      return esWhitespaceStart\n    }\n\n    // Fragment opening tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark\n          ? ' (note: to create a comment in MDX, use `{/* text */}`)'\n          : '')\n    )\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a closing tag name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return primaryName\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNamePrimaryType)\n      returnState = primaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagNamePrefixMarkerType)\n      returnState = localNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameMemberType)\n      effects.consume(code)\n      return memberName\n    }\n\n    crash(\n      code,\n      'before member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return memberName\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameMemberType)\n      returnState = memberNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in member name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameLocalType)\n      effects.consume(code)\n      return localName\n    }\n\n    crash(\n      code,\n      'before local name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign ||\n        (code !== null &&\n          code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot &&\n          code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) /* `/` - `9` */\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return localName\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameLocalType)\n      returnState = localNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagSelfClosingMarker)\n      effects.consume(code)\n      effects.exit(tagSelfClosingMarker)\n      returnState = selfClosing\n      return esWhitespaceStart\n    }\n\n    // End of tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Attribute expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeExpressionAfter,\n        tagExpressionAttributeType,\n        tagExpressionAttributeMarkerType,\n        tagExpressionAttributeValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        true,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    // Start of an attribute name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeType)\n      effects.enter(tagAttributeNameType)\n      effects.enter(tagAttributeNamePrimaryType)\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    crash(\n      code,\n      'before attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    // End of attribute name or tag.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNamePrimaryType)\n      returnState = attributePrimaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagAttributeNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeNamePrefixMarkerType)\n      returnState = attributeLocalNameBefore\n      return esWhitespaceStart\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.exit(tagAttributeNameType)\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code) ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeNameType)\n      effects.exit(tagAttributeType)\n      returnState = attributeBefore\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'after attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeNameLocalType)\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    crash(\n      code,\n      'before local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNameLocalType)\n      effects.exit(tagAttributeNameType)\n      returnState = attributeLocalNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n      effects.enter(tagAttributeValueLiteralType)\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      marker = code\n      return attributeValueQuotedStart\n    }\n\n    // Attribute value expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeValueExpressionAfter,\n        tagAttributeValueExpressionType,\n        tagAttributeValueExpressionMarkerType,\n        tagAttributeValueExpressionValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    crash(\n      code,\n      'before attribute value',\n      'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n          ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)'\n          : '')\n    )\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType)\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(marker !== undefined, 'expected `marker` to be defined')\n\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n      crash(\n        code,\n        'in attribute value',\n        'a corresponding closing quote `' + String.fromCodePoint(marker) + '`'\n      )\n    }\n\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      effects.exit(tagAttributeValueLiteralType)\n      effects.exit(tagAttributeType)\n      marker = undefined\n      returnState = attributeBefore\n      return esWhitespaceStart\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      returnState = attributeValueQuotedStart\n      return esWhitespaceStart(code)\n    }\n\n    effects.enter(tagAttributeValueLiteralValueType)\n    return attributeValueQuoted(code)\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === marker || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit(tagAttributeValueLiteralValueType)\n      return attributeValueQuotedStart(code)\n    }\n\n    effects.consume(code)\n    return attributeValueQuoted\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    crash(\n      code,\n      'after self-closing slash',\n      '`>` to end the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan, 'expected `>`')\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    effects.exit(tagType)\n    return ok\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      return esWhitespaceEolAfter\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.enter('esWhitespace')\n      return esWhitespaceInside(code)\n    }\n\n    return returnState(code)\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit('esWhitespace')\n      return esWhitespaceStart(code)\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.consume(code)\n      return esWhitespaceInside\n    }\n\n    effects.exit('esWhitespace')\n    return returnState(code)\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n        'Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n        self.now(),\n        'micromark-extension-mdx-jsx:unexpected-lazy'\n      )\n      error.url =\n        trouble + '#unexpected-lazy-line-in-container-expected-line-to-be'\n      throw error\n    }\n\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n      'Unexpected ' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n          ? 'end of file'\n          : 'character `' +\n            (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent\n              ? '` ` `'\n              : String.fromCodePoint(code)) +\n            '` (' +\n            serializeCharCode(code) +\n            ')') +\n        ' ' +\n        at +\n        ', expected ' +\n        expect,\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? 'eof' : 'character')\n    )\n    error.url =\n      trouble +\n      (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n        ? '#unexpected-end-of-file-at-expected-expect'\n        : '#unexpected-character-at-expected-expect')\n    throw error\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return (\n    'U+' +\n    code\n      .toString(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal)\n      .toUpperCase()\n      .padStart(4, '0')\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxFlow: () => (/* binding */ jsxFlow)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory-tag.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n\n\n\n\n\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxFlow(acorn, options) {\n  return {concrete: true, name: 'mdxJsxFlowTag', tokenize: tokenizeJsxFlow}\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__.factoryTag.call(\n        self,\n        effects,\n        after,\n        nok,\n        acorn,\n        options.acornOptions,\n        options.addResult,\n        false,\n        'mdxJsxFlowTag',\n        'mdxJsxFlowTagMarker',\n        'mdxJsxFlowTagClosingMarker',\n        'mdxJsxFlowTagSelfClosingMarker',\n        'mdxJsxFlowTagName',\n        'mdxJsxFlowTagNamePrimary',\n        'mdxJsxFlowTagNameMemberMarker',\n        'mdxJsxFlowTagNameMember',\n        'mdxJsxFlowTagNamePrefixMarker',\n        'mdxJsxFlowTagNameLocal',\n        'mdxJsxFlowTagExpressionAttribute',\n        'mdxJsxFlowTagExpressionAttributeMarker',\n        'mdxJsxFlowTagExpressionAttributeValue',\n        'mdxJsxFlowTagAttribute',\n        'mdxJsxFlowTagAttributeName',\n        'mdxJsxFlowTagAttributeNamePrimary',\n        'mdxJsxFlowTagAttributeNamePrefixMarker',\n        'mdxJsxFlowTagAttributeNameLocal',\n        'mdxJsxFlowTagAttributeInitializerMarker',\n        'mdxJsxFlowTagAttributeValueLiteral',\n        'mdxJsxFlowTagAttributeValueLiteralMarker',\n        'mdxJsxFlowTagAttributeValueLiteralValue',\n        'mdxJsxFlowTagAttributeValueExpression',\n        'mdxJsxFlowTagAttributeValueExpressionMarker',\n        'mdxJsxFlowTagAttributeValueExpressionValue'\n      )(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)\n        ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, end, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.whitespace)(code)\n        : end(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow expressions directly after tags.\n      // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n      // for more info.\n      const leftBraceValue = self.parser.constructs.flow[micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace]\n      /* c8 ignore next 5 -- always a list when normalized. */\n      const constructs = Array.isArray(leftBraceValue)\n        ? leftBraceValue\n        : leftBraceValue\n          ? [leftBraceValue]\n          : []\n      /** @type {Construct | undefined} */\n      let expression\n\n      for (const construct of constructs) {\n        if (construct.name === 'mdxFlowExpression') {\n          expression = construct\n          break\n        }\n      }\n\n      // Another tag.\n      return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n        ? // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.\n          start(code)\n        : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace && expression\n          ? effects.attempt(expression, end, nok)(code)\n          : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)\n            ? ok(code)\n            : nok(code)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxText: () => (/* binding */ jsxText)\n/* harmony export */ });\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory-tag.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxText(acorn, options) {\n  return {name: 'mdxJsxTextTag', tokenize: tokenizeJsxText}\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__.factoryTag.call(\n      this,\n      effects,\n      ok,\n      nok,\n      acorn,\n      options.acornOptions,\n      options.addResult,\n      true,\n      'mdxJsxTextTag',\n      'mdxJsxTextTagMarker',\n      'mdxJsxTextTagClosingMarker',\n      'mdxJsxTextTagSelfClosingMarker',\n      'mdxJsxTextTagName',\n      'mdxJsxTextTagNamePrimary',\n      'mdxJsxTextTagNameMemberMarker',\n      'mdxJsxTextTagNameMember',\n      'mdxJsxTextTagNamePrefixMarker',\n      'mdxJsxTextTagNameLocal',\n      'mdxJsxTextTagExpressionAttribute',\n      'mdxJsxTextTagExpressionAttributeMarker',\n      'mdxJsxTextTagExpressionAttributeValue',\n      'mdxJsxTextTagAttribute',\n      'mdxJsxTextTagAttributeName',\n      'mdxJsxTextTagAttributeNamePrimary',\n      'mdxJsxTextTagAttributeNamePrefixMarker',\n      'mdxJsxTextTagAttributeNameLocal',\n      'mdxJsxTextTagAttributeInitializerMarker',\n      'mdxJsxTextTagAttributeValueLiteral',\n      'mdxJsxTextTagAttributeValueLiteralMarker',\n      'mdxJsxTextTagAttributeValueLiteralValue',\n      'mdxJsxTextTagAttributeValueExpression',\n      'mdxJsxTextTagAttributeValueExpressionMarker',\n      'mdxJsxTextTagAttributeValueExpressionValue'\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9qc3gtdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksT0FBTztBQUNuQixZQUFZLHVDQUF1QztBQUNuRDs7QUFFMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQLFVBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQTtBQUNBLFdBQVcsdURBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3hAMy4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL2pzeC10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7T3B0aW9uc30gZnJvbSAnbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4J1xuICogQGltcG9ydCB7QWNvcm59IGZyb20gJ21pY3JvbWFyay11dGlsLWV2ZW50cy10by1hY29ybidcbiAqIEBpbXBvcnQge0NvbnN0cnVjdCwgVG9rZW5pemVDb250ZXh0LCBUb2tlbml6ZXJ9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7ZmFjdG9yeVRhZ30gZnJvbSAnLi9mYWN0b3J5LXRhZy5qcydcblxuLyoqXG4gKiBQYXJzZSBKU1ggKHRleHQpLlxuICpcbiAqIEBwYXJhbSB7QWNvcm4gfCB1bmRlZmluZWR9IGFjb3JuXG4gKiAgIEFjb3JuIHBhcnNlciB0byB1c2UgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge0NvbnN0cnVjdH1cbiAqICAgQ29uc3RydWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24ganN4VGV4dChhY29ybiwgb3B0aW9ucykge1xuICByZXR1cm4ge25hbWU6ICdtZHhKc3hUZXh0VGFnJywgdG9rZW5pemU6IHRva2VuaXplSnN4VGV4dH1cblxuICAvKipcbiAgICogTURYIEpTWCAodGV4dCkuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIC8+LlxuICAgKiAgICAgICBeXl5eXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAgICogQHR5cGUge1Rva2VuaXplcn1cbiAgICovXG4gIGZ1bmN0aW9uIHRva2VuaXplSnN4VGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gICAgcmV0dXJuIGZhY3RvcnlUYWcuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICBlZmZlY3RzLFxuICAgICAgb2ssXG4gICAgICBub2ssXG4gICAgICBhY29ybixcbiAgICAgIG9wdGlvbnMuYWNvcm5PcHRpb25zLFxuICAgICAgb3B0aW9ucy5hZGRSZXN1bHQsXG4gICAgICB0cnVlLFxuICAgICAgJ21keEpzeFRleHRUYWcnLFxuICAgICAgJ21keEpzeFRleHRUYWdNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdDbG9zaW5nTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnU2VsZkNsb3NpbmdNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZVByaW1hcnknLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lTWVtYmVyTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZU1lbWJlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVQcmVmaXhNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lTG9jYWwnLFxuICAgICAgJ21keEpzeFRleHRUYWdFeHByZXNzaW9uQXR0cmlidXRlJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnRXhwcmVzc2lvbkF0dHJpYnV0ZU1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZU5hbWUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lUHJpbWFyeScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZU5hbWVQcmVmaXhNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lTG9jYWwnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVJbml0aWFsaXplck1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbCcsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbE1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbFZhbHVlJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uVmFsdWUnXG4gICAgKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxJsx: () => (/* binding */ mdxJsx)\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _jsx_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-text.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\");\n/* harmony import */ var _jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-flow.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Extension} from 'micromark-util-types'\n */\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nfunction mdxJsx(options) {\n  const settings = options || {}\n  const acorn = settings.acorn\n  /** @type {AcornOptions | undefined} */\n  let acornOptions\n\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2024, sourceType: 'module'},\n      settings.acornOptions,\n      {locations: true}\n    )\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__.jsxFlow)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    },\n    text: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_text_js__WEBPACK_IMPORTED_MODULE_2__.jsxText)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9zeW50YXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLFlBQVksY0FBYztBQUMxQixZQUFZLFdBQVc7QUFDdkI7O0FBRTJDO0FBQ047QUFDQTs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyx3Q0FBd0M7QUFDL0M7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTyx3REFBSyxZQUFZLHFEQUFPO0FBQy9CO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsT0FBTyx3REFBSyxZQUFZLHFEQUFPO0FBQy9CO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3hAMy4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL3N5bnRheC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge09wdGlvbnN9IGZyb20gJ21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeCdcbiAqIEBpbXBvcnQge0Fjb3JuT3B0aW9uc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtZXZlbnRzLXRvLWFjb3JuJ1xuICogQGltcG9ydCB7RXh0ZW5zaW9ufSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5pbXBvcnQge2pzeFRleHR9IGZyb20gJy4vanN4LXRleHQuanMnXG5pbXBvcnQge2pzeEZsb3d9IGZyb20gJy4vanN4LWZsb3cuanMnXG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1pY3JvbWFya2AgdG8gZW5hYmxlIE1EWCBKU1ggc3ludGF4LlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7RXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtaWNyb21hcmtgIHRoYXQgY2FuIGJlIHBhc3NlZCBpbiBgZXh0ZW5zaW9uc2AgdG8gZW5hYmxlIE1EWFxuICogICBKU1ggc3ludGF4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4SnN4KG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIGNvbnN0IGFjb3JuID0gc2V0dGluZ3MuYWNvcm5cbiAgLyoqIEB0eXBlIHtBY29ybk9wdGlvbnMgfCB1bmRlZmluZWR9ICovXG4gIGxldCBhY29ybk9wdGlvbnNcblxuICBpZiAoYWNvcm4pIHtcbiAgICBpZiAoIWFjb3JuLnBhcnNlIHx8ICFhY29ybi5wYXJzZUV4cHJlc3Npb25BdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgYSBwcm9wZXIgYGFjb3JuYCBpbnN0YW5jZSBwYXNzZWQgaW4gYXMgYG9wdGlvbnMuYWNvcm5gJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGFjb3JuT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7ZWNtYVZlcnNpb246IDIwMjQsIHNvdXJjZVR5cGU6ICdtb2R1bGUnfSxcbiAgICAgIHNldHRpbmdzLmFjb3JuT3B0aW9ucyxcbiAgICAgIHtsb2NhdGlvbnM6IHRydWV9XG4gICAgKVxuICB9IGVsc2UgaWYgKHNldHRpbmdzLmFjb3JuT3B0aW9ucyB8fCBzZXR0aW5ncy5hZGRSZXN1bHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFuIGBhY29ybmAgaW5zdGFuY2UgcGFzc2VkIGluIGFzIGBvcHRpb25zLmFjb3JuYCcpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZsb3c6IHtcbiAgICAgIFtjb2Rlcy5sZXNzVGhhbl06IGpzeEZsb3coYWNvcm4gfHwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGFjb3JuT3B0aW9ucyxcbiAgICAgICAgYWRkUmVzdWx0OiBzZXR0aW5ncy5hZGRSZXN1bHQgfHwgdW5kZWZpbmVkXG4gICAgICB9KVxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgW2NvZGVzLmxlc3NUaGFuXToganN4VGV4dChhY29ybiB8fCB1bmRlZmluZWQsIHtcbiAgICAgICAgYWNvcm5PcHRpb25zLFxuICAgICAgICBhZGRSZXN1bHQ6IHNldHRpbmdzLmFkZFJlc3VsdCB8fCB1bmRlZmluZWRcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.2/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js\n");

/***/ })

};
;