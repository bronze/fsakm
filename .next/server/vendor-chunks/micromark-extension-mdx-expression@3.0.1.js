"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-mdx-expression@3.0.1";
exports.ids = ["vendor-chunks/micromark-extension-mdx-expression@3.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-expression@3.0.1/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-expression@3.0.1/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpression: () => (/* binding */ mdxExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-factory-mdx-expression */ \"(rsc)/./node_modules/.pnpm/micromark-factory-mdx-expression@2.0.3/node_modules/micromark-factory-mdx-expression/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-expression'\n * @import {AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable MDX expression syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   expression syntax.\n */\nfunction mdxExpression(options) {\n  const options_ = options || {}\n  const addResult = options_.addResult\n  const acorn = options_.acorn\n  // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,\n  // and one of them is only “spread” elements.\n  // It also has expressions that are not allowed to be empty (`<x y={}/>`).\n  // Instead of duplicating code there, this are two small hidden feature here\n  // to test that behavior.\n  const spread = options_.spread\n  let allowEmpty = options_.allowEmpty\n  /** @type {AcornOptions} */\n  let acornOptions\n\n  if (allowEmpty === null || allowEmpty === undefined) {\n    allowEmpty = true\n  }\n\n  if (acorn) {\n    if (!acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2024, sourceType: 'module'},\n      options_.acornOptions\n    )\n  } else if (options_.acornOptions || options_.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftCurlyBrace]: {\n        name: 'mdxFlowExpression',\n        tokenize: tokenizeFlowExpression,\n        concrete: true\n      }\n    },\n    text: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftCurlyBrace]: {\n        name: 'mdxTextExpression',\n        tokenize: tokenizeTextExpression\n      }\n    }\n  }\n\n  /**\n   * MDX expression (flow).\n   *\n   * ```markdown\n   * > | {Math.PI}\n   *     ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFlowExpression(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of an MDX expression (flow).\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftCurlyBrace, 'expected `{`')\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_2__.factoryMdxExpression.call(\n        self,\n        effects,\n        after,\n        'mdxFlowExpression',\n        'mdxFlowExpressionMarker',\n        'mdxFlowExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty\n      )(code)\n    }\n\n    /**\n     * After expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *              ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)\n        ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, end, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.whitespace)(code)\n        : end(code)\n    }\n\n    /**\n     * After expression, after optional whitespace.\n     *\n     * ```markdown\n     * > | {Math.PI}␠␊\n     *               ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow tags directly after expressions.\n      //\n      // This case is useful:\n      //\n      // ```mdx\n      // <a>{b}</a>\n      // ```\n      //\n      // This case is not (very?) useful:\n      //\n      // ```mdx\n      // {a}<b/>\n      // ```\n      //\n      // …but it would be tougher than needed to disallow.\n      //\n      // To allow that, here we call the flow construct of\n      // `micromark-extension-mdx-jsx`, and there we call this one.\n      //\n      // It would introduce a cyclical interdependency if we test JSX and\n      // expressions here.\n      // Because the JSX extension already uses parts of this monorepo, we\n      // instead test it there.\n      const lessThanValue = self.parser.constructs.flow[micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]\n      const constructs = Array.isArray(lessThanValue)\n        ? lessThanValue\n        : /* c8 ignore next 3 -- always a list when normalized. */\n          lessThanValue\n          ? [lessThanValue]\n          : []\n      const jsxTag = constructs.find(function (d) {\n        return d.name === 'mdxJsxFlowTag'\n      })\n\n      /* c8 ignore next 3 -- this is tested in `micromark-extension-mdx-jsx` */\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan && jsxTag) {\n        return effects.attempt(jsxTag, end, nok)(code)\n      }\n\n      return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n\n  /**\n   * MDX expression (text).\n   *\n   * ```markdown\n   * > | a {Math.PI} c.\n   *       ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeTextExpression(effects, ok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of an MDX expression (text).\n     *\n     * ```markdown\n     * > | a {Math.PI} c.\n     *       ^\n     * ```\n     *\n     *\n     * @type {State}\n     */\n    function start(code) {\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftCurlyBrace, 'expected `{`')\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_2__.factoryMdxExpression.call(\n        self,\n        effects,\n        ok,\n        'mdxTextExpression',\n        'mdxTextExpressionMarker',\n        'mdxTextExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty,\n        true\n      )(code)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-expression@3.0.1/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js\n");

/***/ })

};
;