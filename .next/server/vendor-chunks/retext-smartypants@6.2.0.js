"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/retext-smartypants@6.2.0";
exports.ids = ["vendor-chunks/retext-smartypants@6.2.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/retext-smartypants@6.2.0/node_modules/retext-smartypants/lib/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/retext-smartypants@6.2.0/node_modules/retext-smartypants/lib/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ retextSmartypants)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var nlcst_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nlcst-to-string */ \"(rsc)/./node_modules/.pnpm/nlcst-to-string@4.0.0/node_modules/nlcst-to-string/lib/index.js\");\n/**\n * @import {Parents, Punctuation, Root, SentenceContent, Symbol} from 'nlcst'\n */\n\n/**\n * @callback Method\n *   Transform.\n * @param {State} state\n *   Info passed around.\n * @param {Punctuation | Symbol} node\n *   Node.\n * @param {number} index\n *   Position of `node` in `parent`.\n * @param {Parents} parent\n *   Parent of `node`.\n * @returns {boolean | undefined | void}\n *   Whether to remove the node (`true`); or not (otherwise).\n *\n * @typedef Options\n *   Configuration.\n * @property {'all' | boolean | null | undefined} [backticks=true]\n *   Transform backticks (default: `true`); when `true`, turns double\n *   backticks into an opening double quote and double straight single quotes\n *   into a closing double quote; when `'all'`, does that and turns single\n *   backticks into an opening single quote and a straight single quotes into\n *   a closing single smart quote; `quotes: false` must be used with\n *   `backticks: 'all'`.\n * @property {QuoteCharacterMap | null | undefined} [closingQuotes]\n *   Closing quotes to use (default: `{double: '”', single: '’'}`).\n * @property {'inverted' | 'oldschool' | boolean | null | undefined} [dashes=true]\n *   Transform dashes (default: `true`);\n *   when `true`, turns two dashes into an em dash character;\n *   when `'oldschool'`, turns three dashes into an em dash and two into an en\n *   dash;\n *   when `'inverted'`, turns three dashes into an en dash and two into an em\n *   dash.\n * @property {'spaced' | 'unspaced' | boolean | null | undefined} [ellipses=true]\n *   Transform triple dots (default: `true`).\n *   when `'spaced'`, turns triple dots with spaces into ellipses;\n *   when `'unspaced'`, turns triple dots without spaces into ellipses;\n *   when `true`, turns triple dots with or without spaces into ellipses.\n * @property {QuoteCharacterMap | null | undefined} [openingQuotes]\n *   Opening quotes to use (default: `{double: '“', single: '‘'}`).\n * @property {boolean | null | undefined} [quotes=true]\n *   Transform straight quotes into smart quotes (default: `true`).\n *\n * @typedef State\n *   Info passed around.\n * @property {Quotes} close\n *   Closing quotes.\n * @property {Quotes} open\n *   Opening quotes.\n *\n * @typedef QuoteCharacterMap\n *   Quote characters.\n * @property {string} double\n *   Character to use for double quotes.\n * @property {string} single\n *   Character to use for single quotes.\n *\n * @typedef {[string, string]} Quotes\n *   Quotes.\n */\n\n\n\n\n/** @type {Quotes} */\nconst defaultClosingQuotes = ['”', '’']\n/** @type {Quotes} */\nconst defaultOpeningQuotes = ['“', '‘']\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Replace straight punctuation marks with curly ones.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction retextSmartypants(options) {\n  const settings = options || emptyOptions\n  /** @type {Array<Method>} */\n  const methods = []\n\n  if (settings.quotes !== false) {\n    methods.push(quotesDefault)\n  }\n\n  if (settings.ellipses === 'spaced') {\n    methods.push(ellipsesSpaced)\n  } else if (settings.ellipses === 'unspaced') {\n    methods.push(ellipsesUnspaced)\n  } else if (settings.ellipses !== false) {\n    methods.push(ellipsesDefault)\n  }\n\n  if (settings.backticks === 'all') {\n    if (settings.quotes !== false) {\n      throw new Error(\"Cannot accept `backticks: 'all'` with `quotes: true`\")\n    }\n\n    methods.push(backticksAll)\n  } else if (settings.backticks !== false) {\n    methods.push(backticksDefault)\n  }\n\n  if (settings.dashes === 'inverted') {\n    methods.push(dashesInverted)\n  } else if (settings.dashes === 'oldschool') {\n    methods.push(dashesOldschool)\n  } else if (settings.dashes !== false) {\n    methods.push(dashesDefault)\n  }\n\n  /** @type {State} */\n  const state = {\n    close: settings.closingQuotes\n      ? [settings.closingQuotes.double, settings.closingQuotes.single]\n      : defaultClosingQuotes,\n    open: settings.openingQuotes\n      ? [settings.openingQuotes.double, settings.openingQuotes.single]\n      : defaultOpeningQuotes\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    ;(0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, function (node, position, parent) {\n      let index = -1\n\n      if (\n        parent &&\n        position !== undefined &&\n        (node.type === 'PunctuationNode' || node.type === 'SymbolNode')\n      ) {\n        while (++index < methods.length) {\n          const result = methods[index](state, node, position, parent)\n          if (result === true) {\n            console.log('drop', node)\n            parent.children.splice(position, 1)\n            return position\n          }\n        }\n      }\n    })\n  }\n}\n\n/**\n * Transform single and double backticks and single quotes into smart quotes.\n *\n * @type {Method}\n */\nfunction backticksAll(state, node, index, parent) {\n  backticksDefault(state, node, index, parent)\n\n  if (node.value === '`') {\n    node.value = '‘'\n  } else if (node.value === \"'\") {\n    node.value = '’'\n  }\n}\n\n/**\n * Transform double backticks and single quotes into smart quotes.\n *\n * @type {Method}\n */\nfunction backticksDefault(_, node) {\n  if (node.value === '``') {\n    node.value = '“'\n  } else if (node.value === \"''\") {\n    node.value = '”'\n  }\n}\n\n/**\n * Transform two dashes into an em dash.\n *\n * @type {Method}\n */\nfunction dashesDefault(_, node) {\n  if (node.value === '--') {\n    node.value = '—'\n  }\n}\n\n/**\n * Transform three dashes into an en dash, and two into an em dash.\n *\n * @type {Method}\n */\nfunction dashesInverted(_, node, index, parent) {\n  const next = parent.children[index + 1]\n\n  if (\n    node.value === '—' &&\n    next &&\n    next.type === 'PunctuationNode' &&\n    next.value === '-'\n  ) {\n    next.value = '–'\n    return true\n  }\n\n  if (node.value === '---') {\n    node.value = '–'\n  } else if (node.value === '--') {\n    node.value = '—'\n  }\n}\n\n/**\n * Transform three dashes into an em dash, and two into an en dash.\n *\n * @type {Method}\n */\nfunction dashesOldschool(_, node, index, parent) {\n  const next = parent.children[index + 1]\n\n  if (\n    node.value === '–' &&\n    next &&\n    next.type === 'PunctuationNode' &&\n    next.value === '-'\n  ) {\n    next.value = '—'\n    return true\n  }\n\n  if (node.value === '---') {\n    node.value = '—'\n  } else if (node.value === '--') {\n    node.value = '–'\n  }\n}\n\n/**\n * Transform multiple dots into unicode ellipses.\n *\n * @type {Method}\n */\nfunction ellipsesDefault(_, node, index, parent) {\n  ellipsesSpaced(_, node, index, parent)\n  ellipsesUnspaced(_, node, index, parent)\n}\n\n/**\n * Transform multiple dots with spaces into unicode ellipses.\n *\n * @type {Method}\n */\nfunction ellipsesSpaced(_, node, index, parent) {\n  const value = node.value\n  const siblings = parent.children\n\n  if (!/^\\.+$/.test(value)) {\n    return\n  }\n\n  // Search for dot-nodes with whitespace between.\n  /** @type {Array<SentenceContent>} */\n  const nodes = []\n  let position = index\n  let count = 1\n\n  // It’s possible that the node is merged with an adjacent word-node.  In that\n  // code, we cannot transform it because there’s no reference to the\n  // grandparent.\n  while (--position > 0) {\n    let sibling = siblings[position]\n\n    if (sibling.type !== 'WhiteSpaceNode') {\n      break\n    }\n\n    const queue = sibling\n    sibling = siblings[--position]\n\n    if (\n      sibling &&\n      (sibling.type === 'PunctuationNode' || sibling.type === 'SymbolNode') &&\n      /^\\.+$/.test(sibling.value)\n    ) {\n      nodes.push(queue, sibling)\n\n      count++\n\n      continue\n    }\n\n    break\n  }\n\n  if (count < 3) {\n    return\n  }\n\n  siblings.splice(index - nodes.length, nodes.length)\n\n  node.value = '…'\n}\n\n/**\n * Transform multiple dots without spaces into unicode ellipses.\n *\n * @type {Method}\n */\nfunction ellipsesUnspaced(_, node) {\n  // Simple node with three dots and without whitespace.\n  if (/^\\.{3,}$/.test(node.value)) {\n    node.value = '…'\n  }\n}\n\n/**\n * Transform straight single- and double quotes into smart quotes.\n *\n * @type {Method}\n */\n// eslint-disable-next-line complexity\nfunction quotesDefault(state, node, index, parent) {\n  const siblings = parent.children\n  const value = node.value\n\n  if (value !== '\"' && value !== \"'\") {\n    return\n  }\n\n  const quoteIndex = value === '\"' ? 0 : 1\n  const previous = siblings[index - 1]\n  const next = siblings[index + 1]\n  const nextNext = siblings[index + 2]\n  const nextValue = next ? (0,nlcst_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(next) : ''\n\n  if (\n    next &&\n    (next.type === 'PunctuationNode' || next.type === 'SymbolNode') &&\n    (!nextNext || nextNext.type !== 'WordNode')\n  ) {\n    // Special case if the very first character is a quote followed by\n    // punctuation at a non-word-break. Close the quotes by brute force.\n    node.value = state.close[quoteIndex]\n  } else if (\n    next &&\n    (next.type === 'PunctuationNode' || next.type === 'SymbolNode') &&\n    (nextValue === '\"' || nextValue === \"'\") &&\n    nextNext &&\n    nextNext.type === 'WordNode'\n  ) {\n    // Special case for double sets of quotes:\n    // `He said, \"'Quoted' words in a larger quote.\"`\n    node.value = state.open[quoteIndex]\n    next.value = state.open[nextValue === '\"' ? 0 : 1]\n  } else if (next && /^\\d\\ds$/.test(nextValue)) {\n    // Special case for decade abbreviations: `the '80s`\n    node.value = state.close[quoteIndex]\n  } else if (\n    previous &&\n    (previous.type === 'WhiteSpaceNode' ||\n      previous.type === 'PunctuationNode' ||\n      previous.type === 'SymbolNode') &&\n    next &&\n    next.type === 'WordNode'\n  ) {\n    // Get most opening single quotes.\n    node.value = state.open[quoteIndex]\n  } else if (\n    previous &&\n    previous.type !== 'WhiteSpaceNode' &&\n    previous.type !== 'SymbolNode' &&\n    previous.type !== 'PunctuationNode'\n  ) {\n    // Closing quotes.\n    node.value = state.close[quoteIndex]\n  } else if (\n    !next ||\n    next.type === 'WhiteSpaceNode' ||\n    (value === \"'\" && nextValue === 's')\n  ) {\n    node.value = state.close[quoteIndex]\n  } else {\n    node.value = state.open[quoteIndex]\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/retext-smartypants@6.2.0/node_modules/retext-smartypants/lib/index.js\n");

/***/ })

};
;