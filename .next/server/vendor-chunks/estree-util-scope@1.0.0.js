"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-scope@1.0.0";
exports.ids = ["vendor-chunks/estree-util-scope@1.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createVisitors: () => (/* binding */ createVisitors)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {Node, Pattern} from 'estree'\n * @import {Scope, Visitors} from './types.js'\n */\n\n\n\n/**\n * Create state to track whatâ€™s defined.\n *\n * @returns {Visitors}\n *   State.\n */\nfunction createVisitors() {\n  /** @type {[topLevel: Scope, ...rest: Array<Scope>]} */\n  const scopes = [{block: false, defined: []}]\n\n  return {enter, exit, scopes}\n\n  /**\n   * @param {Node} node\n   *   Node.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node) {\n    // On arrow functions, create scope, add parameters.\n    if (node.type === 'ArrowFunctionExpression') {\n      scopes.push({block: false, defined: []})\n\n      for (const parameter of node.params) {\n        definePattern(parameter, false)\n      }\n    }\n    // On block statements, create scope.\n    // Not sure why `periscopic` only does `Block`/`For`/`ForIn`/`ForOf`.\n    // I added `DoWhile`/`While` here just to be sure.\n    else if (\n      node.type === 'BlockStatement' ||\n      node.type === 'DoWhileStatement' ||\n      node.type === 'ForInStatement' ||\n      node.type === 'ForOfStatement' ||\n      node.type === 'ForStatement' ||\n      node.type === 'WhileStatement'\n    ) {\n      scopes.push({block: true, defined: []})\n    }\n\n    // On catch clauses, create scope, add param.\n    else if (node.type === 'CatchClause') {\n      scopes.push({block: true, defined: []})\n      if (node.param) definePattern(node.param, true)\n    }\n\n    // Add identifier of class declaration.\n    else if (node.type === 'ClassDeclaration') {\n      defineIdentifier(node.id.name, false)\n    }\n\n    // On function declarations, add name, create scope, add parameters.\n    else if (node.type === 'FunctionDeclaration') {\n      defineIdentifier(node.id.name, false)\n      scopes.push({block: false, defined: []})\n\n      for (const parameter of node.params) {\n        definePattern(parameter, false)\n      }\n    }\n\n    // On function expressions, add name, create scope, add parameters.\n    else if (node.type === 'FunctionExpression') {\n      if (node.id) defineIdentifier(node.id.name, false)\n      scopes.push({block: false, defined: []})\n\n      for (const parameter of node.params) {\n        definePattern(parameter, false)\n      }\n    }\n\n    // Add specifiers of import declarations.\n    else if (node.type === 'ImportDeclaration') {\n      for (const specifier of node.specifiers) {\n        defineIdentifier(specifier.local.name, false)\n      }\n    }\n\n    // Add patterns of variable declarations.\n    else if (node.type === 'VariableDeclaration') {\n      for (const declaration of node.declarations) {\n        definePattern(declaration.id, node.kind !== 'var')\n      }\n    }\n  }\n\n  /**\n   * @param {Node} node\n   *   Node.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(node) {\n    if (\n      node.type === 'ArrowFunctionExpression' ||\n      node.type === 'FunctionDeclaration' ||\n      node.type === 'FunctionExpression'\n    ) {\n      const scope = scopes.pop()\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope, 'expected scope')\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(!scope.block, 'expected non-block')\n    } else if (\n      node.type === 'BlockStatement' ||\n      node.type === 'CatchClause' ||\n      node.type === 'DoWhileStatement' ||\n      node.type === 'ForInStatement' ||\n      node.type === 'ForOfStatement' ||\n      node.type === 'ForStatement' ||\n      node.type === 'WhileStatement'\n    ) {\n      const scope = scopes.pop()\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope, 'expected scope')\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope.block, 'expected block')\n    }\n  }\n\n  /**\n   * Define an identifier in a scope.\n   *\n   * @param {string} id\n   * @param {boolean} block\n   * @returns {undefined}\n   */\n  function defineIdentifier(id, block) {\n    let index = scopes.length\n    /** @type {Scope | undefined} */\n    let scope\n\n    while (index--) {\n      scope = scopes[index]\n\n      if (block || !scope.block) {\n        break\n      }\n    }\n\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope)\n    scope.defined.push(id)\n  }\n\n  /**\n   * Define a pattern in a scope.\n   *\n   * @param {Pattern} pattern\n   * @param {boolean} block\n   */\n  function definePattern(pattern, block) {\n    // `[, x]`\n    if (pattern.type === 'ArrayPattern') {\n      for (const element of pattern.elements) {\n        if (element) {\n          definePattern(element, block)\n        }\n      }\n    }\n\n    // `{x=y}`\n    else if (pattern.type === 'AssignmentPattern') {\n      definePattern(pattern.left, block)\n    }\n\n    // `x`\n    else if (pattern.type === 'Identifier') {\n      defineIdentifier(pattern.name, block)\n    }\n\n    // `{x}`\n    else if (pattern.type === 'ObjectPattern') {\n      for (const property of pattern.properties) {\n        // `{key}`, `{key = value}`, `{key: value}`\n        if (property.type === 'Property') {\n          definePattern(property.value, block)\n        }\n        // `{...x}`\n        else {\n          (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(property.type === 'RestElement')\n          definePattern(property, block)\n        }\n      }\n    }\n\n    // `...x`\n    else {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(pattern.type === 'RestElement')\n      definePattern(pattern.argument, block)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js\n");

/***/ })

};
;