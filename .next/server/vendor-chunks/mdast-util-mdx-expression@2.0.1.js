"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-expression@2.0.1";
exports.ids = ["vendor-chunks/mdast-util-mdx-expression@2.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'\n * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'\n * @import {Parents} from 'mdast'\n */\n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Node.\n * @param {Parents | undefined} parent\n *   Parent, if any.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized markdown.\n */\nfunction handleMdxExpression(node, parent, state) {\n  const value = node.value || ''\n  const result = state.indentLines(value, function (line, index, blank) {\n    // Tab-size to eat has to be the same as what we serialize as.\n    // While in some places in markdown that’s 4, in JS it’s more common as 2.\n    // Which is what’s also in `mdast-util-mdx-jsx`:\n    // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\n    return (index === 0 || blank ? '' : '  ') + line\n  })\n  return '{' + result + '}'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbkAyLjAuMS9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxZQUFZLGtGQUFrRjtBQUM5RixZQUFZLHNDQUFzQztBQUNsRCxZQUFZLG1FQUFtRTtBQUMvRSxZQUFZLFNBQVM7QUFDckI7O0FBRW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsT0FBTyxhQUFhLDZCQUE2QjtBQUNqRCxPQUFPLDRCQUE0QjtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjLHFDQUFxQztBQUNuRDtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYyxxQ0FBcUM7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkNBQU07QUFDUjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsV0FBVyx1Q0FBdUM7QUFDbEQ7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxXQUFXLGVBQWU7QUFDMUIiLCJzb3VyY2VzIjpbIi9ob21lL2Jyb256ZS9jb2RpbmcvZnNha20vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb25AMi4wLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb24vbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Q29tcGlsZUNvbnRleHQsIEV4dGVuc2lvbiBhcyBGcm9tTWFya2Rvd25FeHRlbnNpb24sIEhhbmRsZSBhcyBGcm9tTWFya2Rvd25IYW5kbGV9IGZyb20gJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bidcbiAqIEBpbXBvcnQge01keEZsb3dFeHByZXNzaW9uLCBNZHhUZXh0RXhwcmVzc2lvbn0gZnJvbSAnbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbidcbiAqIEBpbXBvcnQge0hhbmRsZSBhcyBUb01hcmtkb3duSGFuZGxlLCBPcHRpb25zIGFzIFRvTWFya2Rvd25FeHRlbnNpb24sIFN0YXRlfSBmcm9tICdtZGFzdC11dGlsLXRvLW1hcmtkb3duJ1xuICogQGltcG9ydCB7UGFyZW50c30gZnJvbSAnbWRhc3QnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcblxuLyoqXG4gKiBDcmVhdGUgYW4gZXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zXG4gKiBpbiBtYXJrZG93bi5cbiAqXG4gKiBXaGVuIHVzaW5nIHRoZSBtaWNyb21hcmsgc3ludGF4IGV4dGVuc2lvbiB3aXRoIGBhZGRSZXN1bHRgLCBub2RlcyB3aWxsIGhhdmVcbiAqIGEgYGRhdGEuZXN0cmVlYCBmaWVsZCBzZXQgdG8gYW4gRVNUcmVlIGBQcm9ncmFtYCBub2RlLlxuICpcbiAqIEByZXR1cm5zIHtGcm9tTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEV4cHJlc3Npb25Gcm9tTWFya2Rvd24oKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXI6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBlbnRlck1keEZsb3dFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGVudGVyTWR4VGV4dEV4cHJlc3Npb25cbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBleGl0TWR4RXhwcmVzc2lvbixcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uQ2h1bms6IGV4aXRNZHhFeHByZXNzaW9uRGF0YSxcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBleGl0TWR4RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uQ2h1bms6IGV4aXRNZHhFeHByZXNzaW9uRGF0YVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLXRvLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zXG4gKiBpbiBtYXJrZG93bi5cbiAqXG4gKiBAcmV0dXJucyB7VG9NYXJrZG93bkV4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC10by1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEV4cHJlc3Npb25Ub01hcmtkb3duKCkge1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXJzOiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogaGFuZGxlTWR4RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBoYW5kbGVNZHhFeHByZXNzaW9uXG4gICAgfSxcbiAgICB1bnNhZmU6IFtcbiAgICAgIHtjaGFyYWN0ZXI6ICd7JywgaW5Db25zdHJ1Y3Q6IFsncGhyYXNpbmcnXX0sXG4gICAgICB7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiAneyd9XG4gICAgXVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZW50ZXJNZHhGbG93RXhwcmVzc2lvbih0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAnbWR4Rmxvd0V4cHJlc3Npb24nLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgdGhpcy5idWZmZXIoKVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGVudGVyTWR4VGV4dEV4cHJlc3Npb24odG9rZW4pIHtcbiAgdGhpcy5lbnRlcih7dHlwZTogJ21keFRleHRFeHByZXNzaW9uJywgdmFsdWU6ICcnfSwgdG9rZW4pXG4gIHRoaXMuYnVmZmVyKClcbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBleGl0TWR4RXhwcmVzc2lvbih0b2tlbikge1xuICBjb25zdCB2YWx1ZSA9IHRoaXMucmVzdW1lKClcbiAgY29uc3QgZXN0cmVlID0gdG9rZW4uZXN0cmVlXG4gIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ21keEZsb3dFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicpXG4gIHRoaXMuZXhpdCh0b2tlbilcbiAgbm9kZS52YWx1ZSA9IHZhbHVlXG5cbiAgaWYgKGVzdHJlZSkge1xuICAgIG5vZGUuZGF0YSA9IHtlc3RyZWV9XG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBleGl0TWR4RXhwcmVzc2lvbkRhdGEodG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZW50ZXIuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICB0aGlzLmNvbmZpZy5leGl0LmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbn1cblxuLyoqXG4gKiBAdHlwZSB7VG9NYXJrZG93bkhhbmRsZX1cbiAqIEBwYXJhbSB7TWR4Rmxvd0V4cHJlc3Npb24gfCBNZHhUZXh0RXhwcmVzc2lvbn0gbm9kZVxuICogICBOb2RlLlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50LCBpZiBhbnkuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTZXJpYWxpemVkIG1hcmtkb3duLlxuICovXG5mdW5jdGlvbiBoYW5kbGVNZHhFeHByZXNzaW9uKG5vZGUsIHBhcmVudCwgc3RhdGUpIHtcbiAgY29uc3QgdmFsdWUgPSBub2RlLnZhbHVlIHx8ICcnXG4gIGNvbnN0IHJlc3VsdCA9IHN0YXRlLmluZGVudExpbmVzKHZhbHVlLCBmdW5jdGlvbiAobGluZSwgaW5kZXgsIGJsYW5rKSB7XG4gICAgLy8gVGFiLXNpemUgdG8gZWF0IGhhcyB0byBiZSB0aGUgc2FtZSBhcyB3aGF0IHdlIHNlcmlhbGl6ZSBhcy5cbiAgICAvLyBXaGlsZSBpbiBzb21lIHBsYWNlcyBpbiBtYXJrZG93biB0aGF04oCZcyA0LCBpbiBKUyBpdOKAmXMgbW9yZSBjb21tb24gYXMgMi5cbiAgICAvLyBXaGljaCBpcyB3aGF04oCZcyBhbHNvIGluIGBtZGFzdC11dGlsLW1keC1qc3hgOlxuICAgIC8vIDxodHRwczovL2dpdGh1Yi5jb20vc3ludGF4LXRyZWUvbWRhc3QtdXRpbC1tZHgtanN4L2Jsb2IvNDBiOTUxYi9saWIvaW5kZXguanMjTDUyPlxuICAgIHJldHVybiAoaW5kZXggPT09IDAgfHwgYmxhbmsgPyAnJyA6ICcgICcpICsgbGluZVxuICB9KVxuICByZXR1cm4gJ3snICsgcmVzdWx0ICsgJ30nXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ })

};
;