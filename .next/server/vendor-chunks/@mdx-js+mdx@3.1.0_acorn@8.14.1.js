"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js+mdx@3.1.0_acorn@8.14.1";
exports.ids = ["vendor-chunks/@mdx-js+mdx@3.1.0_acorn@8.14.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! recma-build-jsx */ \"(rsc)/./node_modules/.pnpm/recma-build-jsx@1.0.0/node_modules/recma-build-jsx/lib/index.js\");\n/* harmony import */ var recma_jsx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! recma-jsx */ \"(rsc)/./node_modules/.pnpm/recma-jsx@1.0.0_acorn@8.14.1/node_modules/recma-jsx/lib/index.js\");\n/* harmony import */ var recma_stringify__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! recma-stringify */ \"(rsc)/./node_modules/.pnpm/recma-stringify@1.0.0/node_modules/recma-stringify/lib/index.js\");\n/* harmony import */ var rehype_recma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rehype-recma */ \"(rsc)/./node_modules/.pnpm/rehype-recma@1.0.0/node_modules/rehype-recma/lib/index.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(rsc)/./node_modules/.pnpm/remark-mdx@3.1.0/node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(rsc)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(rsc)/./node_modules/.pnpm/remark-rehype@11.1.2/node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(rsc)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-build-jsx-transform.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @import {Program} from 'estree-jsx'\n * @import {Root} from 'mdast'\n * @import {Options as RehypeRecmaOptions} from 'rehype-recma'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {SourceMapGenerator} from 'source-map'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {typeof SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {RehypeRecmaOptions['elementAttributeNameCase']} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {RehypeRecmaOptions['stylePropertyNameCase']} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor<Root, Program, Program, Program, string>}\n *   Processor.\n */\nfunction createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n\n  if (settings.format !== 'md') {\n    pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw)\n  }\n\n  pipeline\n    // @ts-expect-error: `Program` is close enough to a `Node`,\n    // but type inference has trouble with it and bridges.\n    .use(rehype_recma__WEBPACK_IMPORTED_MODULE_8__[\"default\"], settings)\n    .use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings)\n    .use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__[\"default\"], settings).use(_plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__.recmaBuildJsxTransform, settings)\n  }\n\n  pipeline\n    .use(recma_jsx__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n    .use(recma_stringify__WEBPACK_IMPORTED_MODULE_14__[\"default\"], settings)\n    .use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: TS doesn’t get the plugins we added with if-statements.\n  return pipeline\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nconst nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvbm9kZS10eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2Jyb256ZS9jb2RpbmcvZnNha20vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaXN0IG9mIG5vZGUgdHlwZXMgbWFkZSBieSBgbWRhc3QtdXRpbC1tZHhgLCB3aGljaCBoYXZlIHRvIGJlIHBhc3NlZFxuICogdGhyb3VnaCB1bnRvdWNoZWQgZnJvbSB0aGUgbWRhc3QgdHJlZSB0byB0aGUgaGFzdCB0cmVlLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZVR5cGVzID0gLyoqIEB0eXBlIHtjb25zdH0gKi8gKFtcbiAgJ21keEZsb3dFeHByZXNzaW9uJyxcbiAgJ21keEpzeEZsb3dFbGVtZW50JyxcbiAgJ21keEpzeFRleHRFbGVtZW50JyxcbiAgJ21keFRleHRFeHByZXNzaW9uJyxcbiAgJ21keGpzRXNtJ1xuXSlcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaBuildJsxTransform: () => (/* binding */ recmaBuildJsxTransform)\n/* harmony export */ });\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {Program} from 'estree-jsx'\n */ /**\n * @typedef Options\n *   Configuration for internal plugin `recma-build-jsx-transform`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n */ \n\n/**\n * Plugin to change the tree after compiling JSX away.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaBuildJsxTransform(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === 'function-body') {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if ('directive' in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === 'ImportDeclaration' && typeof declaration.source.value === 'string' && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: 'VariableDeclaration',\n                    kind: 'const',\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__.toIdOrMemberExpression)([\n                        'arguments',\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLWJ1aWxkLWpzeC10cmFuc2Zvcm0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7Ozs7O0NBTUMsR0FFeUY7QUFDRjtBQUV4Rjs7Ozs7OztDQU9DLEdBQ00sU0FBU0UsdUJBQXVCQyxPQUFPO0lBQzVDLG1EQUFtRCxHQUNuRCxNQUFNLEVBQUNDLFlBQVksRUFBQyxHQUFHRCxXQUFXLENBQUM7SUFFbkM7Ozs7O0dBS0MsR0FDRCxPQUFPLFNBQVVFLElBQUk7UUFDbkIsMEVBQTBFO1FBQzFFLFVBQVU7UUFDVixJQUFJQSxLQUFLQyxRQUFRLEVBQUU7WUFDakJELEtBQUtDLFFBQVEsR0FBR0QsS0FBS0MsUUFBUSxDQUFDQyxNQUFNLENBQUMsU0FBVUMsQ0FBQztnQkFDOUMsT0FBTyxDQUFDQSxFQUFFQyxJQUFJLEVBQUVDO1lBQ2xCO1FBQ0Y7UUFFQSxzRUFBc0U7UUFDdEUsdUVBQXVFO1FBQ3ZFLFdBQVc7UUFDWCxJQUFJTixpQkFBaUIsaUJBQWlCO1lBQ3BDLElBQUlPLFFBQVE7WUFFWix3RUFBd0U7WUFDeEUsa0JBQWtCO1lBQ2xCLHNEQUFzRDtZQUN0RCxNQUFPQSxRQUFRTixLQUFLTyxJQUFJLENBQUNDLE1BQU0sQ0FBRTtnQkFDL0IsTUFBTUMsUUFBUVQsS0FBS08sSUFBSSxDQUFDRCxNQUFNO2dCQUM5QixJQUFJLGVBQWVHLFNBQVNBLE1BQU1DLFNBQVMsRUFBRTtvQkFDM0NKO2dCQUNGLE9BQU87b0JBQ0w7Z0JBQ0Y7WUFDRjtZQUVBLE1BQU1LLGNBQWNYLEtBQUtPLElBQUksQ0FBQ0QsTUFBTTtZQUVwQyxJQUNFSyxlQUNBQSxZQUFZQyxJQUFJLEtBQUssdUJBQ3JCLE9BQU9ELFlBQVlFLE1BQU0sQ0FBQ0MsS0FBSyxLQUFLLFlBQ3BDLHdCQUF3QkMsSUFBSSxDQUFDSixZQUFZRSxNQUFNLENBQUNDLEtBQUssR0FDckQ7Z0JBQ0FkLEtBQUtPLElBQUksQ0FBQ0QsTUFBTSxHQUFHO29CQUNqQk0sTUFBTTtvQkFDTkksTUFBTTtvQkFDTkMsY0FBY3RCLHlHQUF3QkEsQ0FDcENnQixZQUFZTyxVQUFVLEVBQ3RCdEIsdUdBQXNCQSxDQUFDO3dCQUFDO3dCQUFhO3FCQUFFO2dCQUUzQztZQUNGO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtYnVpbGQtanN4LXRyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1Byb2dyYW19IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGludGVybmFsIHBsdWdpbiBgcmVjbWEtYnVpbGQtanN4LXRyYW5zZm9ybWAuXG4gKiBAcHJvcGVydHkgeydmdW5jdGlvbi1ib2R5JyB8ICdwcm9ncmFtJyB8IG51bGwgfCB1bmRlZmluZWR9IFtvdXRwdXRGb3JtYXQ9J3Byb2dyYW0nXVxuICogICBXaGV0aGVyIHRvIGtlZXAgdGhlIGltcG9ydCBvZiB0aGUgYXV0b21hdGljIHJ1bnRpbWUgb3IgZ2V0IGl0IGZyb21cbiAqICAgYGFyZ3VtZW50c1swXWAgaW5zdGVhZCAoZGVmYXVsdDogYCdwcm9ncmFtJ2ApLlxuICovXG5cbmltcG9ydCB7c3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zfSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzJ1xuaW1wb3J0IHt0b0lkT3JNZW1iZXJFeHByZXNzaW9ufSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzJ1xuXG4vKipcbiAqIFBsdWdpbiB0byBjaGFuZ2UgdGhlIHRyZWUgYWZ0ZXIgY29tcGlsaW5nIEpTWCBhd2F5LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8T3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjbWFCdWlsZEpzeFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0IC0tIGFsd2F5cyBnaXZlbiBpbiBgQG1keC1qcy9tZHhgICovXG4gIGNvbnN0IHtvdXRwdXRGb3JtYXR9ID0gb3B0aW9ucyB8fCB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Byb2dyYW19IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHByYWdtYSBjb21tZW50IHRoYXQgd2UgaW5qZWN0ZWQgb3Vyc2VsdmVzIGFzIGl0IGlzIG5vIGxvbmdlclxuICAgIC8vIG5lZWRlZC5cbiAgICBpZiAodHJlZS5jb21tZW50cykge1xuICAgICAgdHJlZS5jb21tZW50cyA9IHRyZWUuY29tbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiAhZC5kYXRhPy5fbWR4SXNQcmFnbWFDb21tZW50XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFdoZW4gY29tcGlsaW5nIHRvIGEgZnVuY3Rpb24gYm9keSwgcmVwbGFjZSB0aGUgaW1wb3J0IHRoYXQgd2FzIGp1c3RcbiAgICAvLyBnZW5lcmF0ZWQsIGFuZCBnZXQgYGpzeGAsIGBqc3hzYCwgYW5kIGBGcmFnbWVudGAgZnJvbSBgYXJndW1lbnRzWzBdYFxuICAgIC8vIGluc3RlYWQuXG4gICAgaWYgKG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknKSB7XG4gICAgICBsZXQgaW5kZXggPSAwXG5cbiAgICAgIC8vIFNraXAgZGlyZWN0aXZlczogSlMgY3VycmVudGx5IG9ubHkgaGFzIGB1c2Ugc3RyaWN0YCwgYnV0IEFjb3JuIGFsbG93c1xuICAgICAgLy8gYXJiaXRyYXJ5IG9uZXMuXG4gICAgICAvLyBQcmFjdGljYWxseSB0aGluZ3MgbGlrZSBgdXNlIGNsaWVudGAgY291bGQgYmUgdXNlZD9cbiAgICAgIHdoaWxlIChpbmRleCA8IHRyZWUuYm9keS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0cmVlLmJvZHlbaW5kZXhdXG4gICAgICAgIGlmICgnZGlyZWN0aXZlJyBpbiBjaGlsZCAmJiBjaGlsZC5kaXJlY3RpdmUpIHtcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkZWNsYXJhdGlvbiA9IHRyZWUuYm9keVtpbmRleF1cblxuICAgICAgaWYgKFxuICAgICAgICBkZWNsYXJhdGlvbiAmJlxuICAgICAgICBkZWNsYXJhdGlvbi50eXBlID09PSAnSW1wb3J0RGVjbGFyYXRpb24nICYmXG4gICAgICAgIHR5cGVvZiBkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIC9cXC9qc3gtKGRldi0pP3J1bnRpbWUkLy50ZXN0KGRlY2xhcmF0aW9uLnNvdXJjZS52YWx1ZSlcbiAgICAgICkge1xuICAgICAgICB0cmVlLmJvZHlbaW5kZXhdID0ge1xuICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0aW9uJyxcbiAgICAgICAgICBraW5kOiAnY29uc3QnLFxuICAgICAgICAgIGRlY2xhcmF0aW9uczogc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKFxuICAgICAgICAgICAgZGVjbGFyYXRpb24uc3BlY2lmaWVycyxcbiAgICAgICAgICAgIHRvSWRPck1lbWJlckV4cHJlc3Npb24oWydhcmd1bWVudHMnLCAwXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwicmVjbWFCdWlsZEpzeFRyYW5zZm9ybSIsIm9wdGlvbnMiLCJvdXRwdXRGb3JtYXQiLCJ0cmVlIiwiY29tbWVudHMiLCJmaWx0ZXIiLCJkIiwiZGF0YSIsIl9tZHhJc1ByYWdtYUNvbW1lbnQiLCJpbmRleCIsImJvZHkiLCJsZW5ndGgiLCJjaGlsZCIsImRpcmVjdGl2ZSIsImRlY2xhcmF0aW9uIiwidHlwZSIsInNvdXJjZSIsInZhbHVlIiwidGVzdCIsImtpbmQiLCJkZWNsYXJhdGlvbnMiLCJzcGVjaWZpZXJzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/./node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/.pnpm/estree-walker@3.0.1/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      CallExpression,\n      Directive,\n      ExportAllDeclaration,\n      ExportDefaultDeclaration,\n      ExportNamedDeclaration,\n      ExportSpecifier,\n      Expression,\n      FunctionDeclaration,\n      Identifier,\n      ImportDeclaration,\n      ImportDefaultSpecifier,\n      ImportExpression,\n      ImportSpecifier,\n      JSXElement,\n      JSXFragment,\n      Literal,\n      ModuleDeclaration,\n      Node,\n      Program,\n      Property,\n      SimpleLiteral,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nfunction recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedValues = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__.isDeclaration)(child.declaration)\n                ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__.declarationToExpression)(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (\n            specifier.exported.type === 'Identifier' &&\n            specifier.exported.name === 'default'\n          ) {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name === 'default'\n            ) {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedValues.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedValues.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            ;(0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: next major: use `URL.canParse`.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_7__.createVisitors)()\n          // Walk the top-level scope.\n          ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node, {\n            enter(node) {\n              visitors.enter(node)\n\n              if (\n                node.type === 'ArrowFunctionExpression' ||\n                node.type === 'FunctionDeclaration' ||\n                node.type === 'FunctionExpression'\n              ) {\n                this.skip()\n                visitors.exit(node)\n              }\n            },\n            leave: visitors.exit\n          })\n          exportedValues.push(...visitors.scopes[0].defined)\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          if (child.exported.type === 'Identifier') {\n            exportedValues.push(child.exported.name)\n            /* c8 ignore next 5 -- to do: <https://github.com/mdx-js/mdx/issues/2536> */\n          } else {\n            // Must be string.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof child.exported.value === 'string')\n            exportedValues.push(child.exported.value)\n          }\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = []\n\n          for (const specifier of node.specifiers) {\n            // `id` can only be an identifier,\n            // so we ignore literal.\n            if (\n              specifier.exported.type === 'Identifier' &&\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name !== specifier.exported.name\n            ) {\n              declarators.push({\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              })\n            }\n          }\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/./node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/.pnpm/estree-walker@3.0.1/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      Expression,\n      Function as EstreeFunction,\n      Identifier,\n      ImportSpecifier,\n      JSXElement,\n      ModuleDeclaration,\n      ObjectPattern,\n      Program,\n      Property,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {Scope} from 'estree-util-scope'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n/**\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_1__.createVisitors)()\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n      enter(node) {\n        visitors.enter(node)\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // `MDXContent` only ever contains `MDXLayout`.\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            !inScope(visitors.scopes, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionInfo = functionStack[0]\n\n        if (\n          !functionInfo ||\n          (!isNamedFunction(functionInfo.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n            const isInScope = inScope(visitors.scopes, id)\n\n            if (\n              !Object.hasOwn(functionInfo.references, fullId) &&\n              (!isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (functionStack.length === 1 &&\n                  functionStack[0].node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(functionStack[0].node, '_createMdxContent')))\n            ) {\n              functionInfo.references[fullId] = {component: true, node}\n            }\n\n            if (!functionInfo.objects.includes(id) && !isInScope) {\n              functionInfo.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(visitors.scopes, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionInfo.references, id)\n              ) {\n                functionInfo.references[id] = {component: true, node}\n              }\n\n              if (!functionInfo.components.includes(id)) {\n                functionInfo.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionInfo.tags.includes(id)) {\n              functionInfo.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n              let invalidComponentName =\n                functionInfo.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionInfo.idToInvalidComponentName.size}`\n                functionInfo.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        visitors.exit(node)\n\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const functionInfo = functionStack[functionStack.length - 1]\n\n          /** @type {string} */\n          let name\n\n          for (name of functionInfo.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...functionInfo.components)\n\n          for (name of functionInfo.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            functionInfo.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(functionInfo.node, 'MDXContent') ||\n              isNamedFunction(functionInfo.node, '_createMdxContent')\n            ) {\n              parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (functionInfo.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(functionInfo.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...functionInfo.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in functionInfo.references) {\n            if (Object.hasOwn(functionInfo.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(functionInfo.references, partial)) {\n                  functionInfo.references[partial] = {\n                    component: false,\n                    node: functionInfo.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(functionInfo.references).sort()\n\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = functionInfo.references[id]\n            const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (node.body.type !== 'BlockStatement') {\n              node.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: node.body}]\n              }\n            }\n\n            node.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [(0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(\n          specifiers,\n          (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Array<Scope>} scopes\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scopes, id) {\n  let index = scopes.length\n\n  while (index--) {\n    const scope = scopes[index]\n\n    if (scope.defined.includes(id)) {\n      return true\n    }\n  }\n\n  return false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root} from 'hast'\n */\n\n\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nfunction rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlaHlwZS1yZW1vdmUtcmF3LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxZQUFZLE1BQU07QUFDbEI7O0FBRXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLElBQUksdURBQUs7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlbW92ZS1yYXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtSb290fSBmcm9tICdoYXN0J1xuICovXG5cbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5cbi8qKlxuICogQSB0aW55IHBsdWdpbiB0aGF0IHJlbW92ZXMgcmF3IEhUTUwuXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgaWYgdGhlIGZvcm1hdCBpcyBgbWRgIGFuZCBgcmVoeXBlLXJhd2Agd2FzIG5vdCB1c2VkIHRvIHBhcnNlXG4gKiBkYW5nZXJvdXMgSFRNTCBpbnRvIG5vZGVzLlxuICpcbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlaHlwZVJlbW92ZVJhdygpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsICdyYXcnLCBmdW5jdGlvbiAoXywgaW5kZXgsIHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIHJldHVybiBpbmRleFxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! collapse-white-space */ \"(rsc)/./node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/.pnpm/estree-walker@3.0.1/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root, RootContent} from 'mdast'\n */\n\n\n\n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nfunction remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_2__.collapseWhiteSpace)(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n\n      if (\n        (node.type === 'mdxFlowExpression' ||\n          node.type === 'mdxTextExpression' ||\n          node.type === 'mdxjsEsm') &&\n        node.data &&\n        node.data.estree\n      ) {\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node.data.estree, {\n          enter(node) {\n            if (node.type === 'JSXElement') {\n              const data = node.data || (node.data = {})\n              data._mdxExplicitJsx = true\n            }\n          }\n        })\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlbWFyay1tYXJrLWFuZC11bnJhdmVsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9COztBQUV1RDtBQUNyQjtBQUNJOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsSUFBSSx1REFBSztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVksd0VBQWtCLGVBQWUsMEJBQTBCO0FBQ3ZFO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUIsb0JBQW9CO0FBQ3pDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG1EQUFJO0FBQ1o7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJvbnplL2NvZGluZy9mc2FrbS9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlbWFyay1tYXJrLWFuZC11bnJhdmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Um9vdCwgUm9vdENvbnRlbnR9IGZyb20gJ21kYXN0J1xuICovXG5cbmltcG9ydCB7Y29sbGFwc2VXaGl0ZVNwYWNlfSBmcm9tICdjb2xsYXBzZS13aGl0ZS1zcGFjZSdcbmltcG9ydCB7d2Fsa30gZnJvbSAnZXN0cmVlLXdhbGtlcidcbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5cbi8qKlxuICogQSB0aW55IHBsdWdpbiB0aGF0IHVucmF2ZWxzIGA8cD48aDE+eDwvaDE+PC9wPmAgYnV0IGFsc29cbiAqIGA8cD48Q29tcG9uZW50IC8+PC9wPmAgKHNvIGl0IGhhcyBubyBrbm93bGVkZ2Ugb2Yg4oCcSFRNTOKAnSkuXG4gKlxuICogSXQgYWxzbyBtYXJrcyBKU1ggYXMgYmVpbmcgZXhwbGljaXRseSBKU1gsIHNvIHdoZW4gYSB1c2VyIHBhc3NlcyBhIGBoMWBcbiAqIGNvbXBvbmVudCwgaXQgaXMgdXNlZCBmb3IgYCMgaGVhZGluZ2AgYnV0IG5vdCBmb3IgYDxoMT5oZWFkaW5nPC9oMT5gLlxuICpcbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbWFya01hcmtBbmRVbnJhdmVsKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgdmlzaXQodHJlZSwgZnVuY3Rpb24gKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICAgIGxldCBvZmZzZXQgPSAtMVxuICAgICAgbGV0IGFsbCA9IHRydWVcbiAgICAgIGxldCBvbmVPck1vcmUgPSBmYWxzZVxuXG4gICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgJiYgbm9kZS50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cblxuICAgICAgICB3aGlsZSAoKytvZmZzZXQgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW29mZnNldF1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCcgfHxcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbidcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG9uZU9yTW9yZSA9IHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgICBjb2xsYXBzZVdoaXRlU3BhY2UoY2hpbGQudmFsdWUsIHtzdHlsZTogJ2h0bWwnLCB0cmltOiB0cnVlfSkgPT09ICcnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBFbXB0eS5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxsID0gZmFsc2VcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFsbCAmJiBvbmVPck1vcmUpIHtcbiAgICAgICAgICBvZmZzZXQgPSAtMVxuXG4gICAgICAgICAgLyoqIEB0eXBlIHtBcnJheTxSb290Q29udGVudD59ICovXG4gICAgICAgICAgY29uc3QgbmV3Q2hpbGRyZW4gPSBbXVxuXG4gICAgICAgICAgd2hpbGUgKCsrb2Zmc2V0IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW29mZnNldF1cblxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCcpIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlIGJlY2F1c2UgaXQgaXMgZmFzdGVyOyBjb250ZW50IG1vZGVsIGlzIGZpbmUuXG4gICAgICAgICAgICAgIGNoaWxkLnR5cGUgPSAnbWR4SnN4Rmxvd0VsZW1lbnQnXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZSBiZWNhdXNlIGl0IGlzIGZhc3RlcjsgY29udGVudCBtb2RlbCBpcyBmaW5lLlxuICAgICAgICAgICAgICBjaGlsZC50eXBlID0gJ21keEZsb3dFeHByZXNzaW9uJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgICAgICAvXltcXHRcXHJcXG4gXSskLy50ZXN0KFN0cmluZyhjaGlsZC52YWx1ZSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEsIC4uLm5ld0NoaWxkcmVuKVxuICAgICAgICAgIHJldHVybiBpbmRleFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgbm9kZS50eXBlID09PSAnbWR4SnN4Rmxvd0VsZW1lbnQnIHx8XG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ21keEpzeFRleHRFbGVtZW50J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGEgfHwgKG5vZGUuZGF0YSA9IHt9KVxuICAgICAgICBkYXRhLl9tZHhFeHBsaWNpdEpzeCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAobm9kZS50eXBlID09PSAnbWR4Rmxvd0V4cHJlc3Npb24nIHx8XG4gICAgICAgICAgbm9kZS50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nIHx8XG4gICAgICAgICAgbm9kZS50eXBlID09PSAnbWR4anNFc20nKSAmJlxuICAgICAgICBub2RlLmRhdGEgJiZcbiAgICAgICAgbm9kZS5kYXRhLmVzdHJlZVxuICAgICAgKSB7XG4gICAgICAgIHdhbGsobm9kZS5kYXRhLmVzdHJlZSwge1xuICAgICAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdKU1hFbGVtZW50Jykge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IChub2RlLmRhdGEgPSB7fSlcbiAgICAgICAgICAgICAgZGF0YS5fbWR4RXhwbGljaXRKc3ggPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @import {Node} from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  /** @type {Array<keyof Node>} */\n  const fields = ['start', 'end', 'loc', 'range']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1jcmVhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUCxhQUFhLG1CQUFtQjtBQUNoQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWNyZWF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge05vZGV9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuLy8gRml4IHRvIHNob3cgcmVmZXJlbmNlcyB0byBhYm92ZSB0eXBlcyBpbiBWUyBDb2RlLlxuJydcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE5vZGU+fSBmcm9tXG4gKiAgIE5vZGUgdG8gdGFrZSBmcm9tLlxuICogQHBhcmFtIHtOb2RlfSB0b1xuICogICBOb2RlIHRvIGFkZCB0by5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoZnJvbSwgdG8pIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxrZXlvZiBOb2RlPn0gKi9cbiAgY29uc3QgZmllbGRzID0gWydzdGFydCcsICdlbmQnLCAnbG9jJywgJ3JhbmdlJ11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGZpZWxkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF1cblxuICAgIGlmIChmaWVsZCBpbiBmcm9tKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdGhleeKAmXJlIHNldHRhYmxlLlxuICAgICAgdG9bZmllbGRdID0gZnJvbVtmaWVsZF1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {\n      Declaration,\n      Expression,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration\n * } from 'estree-jsx'\n */\n\n\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nfunction declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1kZWNsYXJhdGlvbi10by1leHByZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9GQUFvRjtBQUMvRjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0EsRUFBRSwwQ0FBTTtBQUNSLFVBQVU7QUFDViIsInNvdXJjZXMiOlsiL2hvbWUvYnJvbnplL2NvZGluZy9mc2FrbS9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1kZWNsYXJhdGlvbi10by1leHByZXNzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBEZWNsYXJhdGlvbixcbiAgICAgIEV4cHJlc3Npb24sXG4gICAgICBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbixcbiAgICAgIE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uXG4gKiB9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcblxuLyoqXG4gKiBUdXJuIGEgZGVjbGFyYXRpb24gaW50byBhbiBleHByZXNzaW9uLlxuICpcbiAqIERvZXNu4oCZdCB3b3JrIGZvciB2YXJpYWJsZSBkZWNsYXJhdGlvbnMsIGJ1dCB0aGF04oCZcyBmaW5lIGZvciBvdXIgdXNlIGNhc2VcbiAqIGJlY2F1c2UgY3VycmVudGx5IHdl4oCZcmUgdXNpbmcgdGhpcyB1dGlsaXR5IGZvciBleHBvcnQgZGVmYXVsdCBkZWNsYXJhdGlvbnMsXG4gKiB3aGljaCBjYW7igJl0IGNvbnRhaW4gdmFyaWFibGUgZGVjbGFyYXRpb25zLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8RGVjbGFyYXRpb24gfCBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uPn0gZGVjbGFyYXRpb25cbiAqICAgRGVjbGFyYXRpb24uXG4gKiBAcmV0dXJucyB7RXhwcmVzc2lvbn1cbiAqICAgRXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uVG9FeHByZXNzaW9uKGRlY2xhcmF0aW9uKSB7XG4gIGlmIChkZWNsYXJhdGlvbi50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicpIHtcbiAgICByZXR1cm4gey4uLmRlY2xhcmF0aW9uLCB0eXBlOiAnRnVuY3Rpb25FeHByZXNzaW9uJ31cbiAgfVxuXG4gIC8vIFRoaXMgaXMgY3VycmVudGx5IGFuIGludGVybmFsIHV0aWxpdHkgc28gdGhlIG5leHQgc2hvdWxkbuKAmXQgaGFwcGVuIG9yIGFcbiAgLy8gbWFpbnRhaW5lciBpcyBtYWtpbmcgYSBtaXN0YWtlLlxuICBhc3NlcnQoZGVjbGFyYXRpb24udHlwZSA9PT0gJ0NsYXNzRGVjbGFyYXRpb24nLCAndW5leHBlY3RlZCBub2RlIHR5cGUnKVxuICByZXR1cm4gey4uLmRlY2xhcmF0aW9uLCB0eXBlOiAnQ2xhc3NFeHByZXNzaW9uJ31cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @import {\n      Declaration,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration,\n      Node\n * } from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nfunction isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1pcy1kZWNsYXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2RUFBNkU7QUFDeEY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBEZWNsYXJhdGlvbixcbiAgICAgIE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uLFxuICAgICAgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gICAgICBOb2RlXG4gKiB9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuLy8gRml4IHRvIHNob3cgcmVmZXJlbmNlcyB0byBhYm92ZSB0eXBlcyBpbiBWUyBDb2RlLlxuJydcblxuLyoqXG4gKiBDaGVjayBpZiBgbm9kZWAgaXMgYSBkZWNsYXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24gfCBOb2RlPn0gbm9kZVxuICogICBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMge25vZGUgaXMgRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9ufVxuICogICBXaGV0aGVyIGBub2RlYCBpcyBhIGRlY2xhcmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWNsYXJhdGlvbihub2RlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nIHx8XG4gICAgICBub2RlLnR5cGUgPT09ICdDbGFzc0RlY2xhcmF0aW9uJyB8fFxuICAgICAgbm9kZS50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbidcbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @import {\n      AssignmentProperty,\n      ExportSpecifier,\n      Expression,\n      Identifier,\n      ImportDefaultSpecifier,\n      ImportNamespaceSpecifier,\n      ImportSpecifier,\n      Literal,\n      VariableDeclarator\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nfunction specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier | Literal} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        // To do: what to do about literals?\n        // `const { a: 'b' } = c()` does not work?\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(value.type === 'Identifier')\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand:\n            key.type === 'Identifier' &&\n            value.type === 'Identifier' &&\n            key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVtQztBQUNXOztBQUU5QztBQUNBLFdBQVcsOElBQThJO0FBQ3pKO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLDJCQUEyQjtBQUN4QztBQUNBLGFBQWEsbUVBQW1FO0FBQ2hGO0FBQ0E7QUFDQSxhQUFhLHNDQUFzQztBQUNuRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQU07QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCLFFBQVEsMENBQU07O0FBRWQsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtEQUFNO0FBQ2Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icm9uemUvY29kaW5nL2ZzYWttL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBBc3NpZ25tZW50UHJvcGVydHksXG4gICAgICBFeHBvcnRTcGVjaWZpZXIsXG4gICAgICBFeHByZXNzaW9uLFxuICAgICAgSWRlbnRpZmllcixcbiAgICAgIEltcG9ydERlZmF1bHRTcGVjaWZpZXIsXG4gICAgICBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsXG4gICAgICBJbXBvcnRTcGVjaWZpZXIsXG4gICAgICBMaXRlcmFsLFxuICAgICAgVmFyaWFibGVEZWNsYXJhdG9yXG4gKiB9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL2VzdHJlZS11dGlsLWNyZWF0ZS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8UmVhZG9ubHk8RXhwb3J0U3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydERlZmF1bHRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydFNwZWNpZmllcj4+fSBzcGVjaWZpZXJzXG4gKiAgIFNwZWNpZmllcnMuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PEV4cHJlc3Npb24+fSBpbml0XG4gKiAgIEluaXRpYWxpemVyLlxuICogQHJldHVybnMge0FycmF5PFZhcmlhYmxlRGVjbGFyYXRvcj59XG4gKiAgIERlY2xhcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhzcGVjaWZpZXJzLCBpbml0KSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn0gKi9cbiAgY29uc3QgZGVjbGFyYXRpb25zID0gW11cbiAgLyoqIEB0eXBlIHtBcnJheTxFeHBvcnRTcGVjaWZpZXIgfCBJbXBvcnREZWZhdWx0U3BlY2lmaWVyIHwgSW1wb3J0U3BlY2lmaWVyPn0gKi9cbiAgY29uc3Qgb3RoZXJTcGVjaWZpZXJzID0gW11cbiAgLy8gQ2FuIG9ubHkgYmUgb25lIGFjY29yZGluZyB0byBKUyBzeW50YXguXG4gIC8qKiBAdHlwZSB7SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBzcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgIGNvbnN0IHNwZWNpZmllciA9IHNwZWNpZmllcnNbaW5kZXhdXG5cbiAgICBpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXInKSB7XG4gICAgICBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBzcGVjaWZpZXJcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXJTcGVjaWZpZXJzLnB1c2goc3BlY2lmaWVyKVxuICAgIH1cbiAgfVxuXG4gIGlmIChpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIpIHtcbiAgICAvKiogQHR5cGUge1ZhcmlhYmxlRGVjbGFyYXRvcn0gKi9cbiAgICBjb25zdCBkZWNsYXJhdG9yID0ge1xuICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgICBpZDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLmxvY2FsLFxuICAgICAgaW5pdFxuICAgIH1cbiAgICBjcmVhdGUoaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLCBkZWNsYXJhdG9yKVxuICAgIGRlY2xhcmF0aW9ucy5wdXNoKGRlY2xhcmF0b3IpXG4gIH1cblxuICBkZWNsYXJhdGlvbnMucHVzaCh7XG4gICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcbiAgICAgIHByb3BlcnRpZXM6IG90aGVyU3BlY2lmaWVycy5tYXAoZnVuY3Rpb24gKHNwZWNpZmllcikge1xuICAgICAgICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsfSAqL1xuICAgICAgICBsZXQga2V5ID1cbiAgICAgICAgICBzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgID8gc3BlY2lmaWVyLmltcG9ydGVkXG4gICAgICAgICAgICA6IHNwZWNpZmllci50eXBlID09PSAnRXhwb3J0U3BlY2lmaWVyJ1xuICAgICAgICAgICAgICA/IHNwZWNpZmllci5leHBvcnRlZFxuICAgICAgICAgICAgICA6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdkZWZhdWx0J31cbiAgICAgICAgbGV0IHZhbHVlID0gc3BlY2lmaWVyLmxvY2FsXG5cbiAgICAgICAgLy8gU3dpdGNoIHRoZW0gYXJvdW5kIGlmIHdl4oCZcmUgZXhwb3J0aW5nLlxuICAgICAgICBpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdFeHBvcnRTcGVjaWZpZXInKSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXlcbiAgICAgICAgICBrZXkgPSBzcGVjaWZpZXIubG9jYWxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvIGRvOiB3aGF0IHRvIGRvIGFib3V0IGxpdGVyYWxzP1xuICAgICAgICAvLyBgY29uc3QgeyBhOiAnYicgfSA9IGMoKWAgZG9lcyBub3Qgd29yaz9cbiAgICAgICAgYXNzZXJ0KHZhbHVlLnR5cGUgPT09ICdJZGVudGlmaWVyJylcblxuICAgICAgICAvKiogQHR5cGUge0Fzc2lnbm1lbnRQcm9wZXJ0eX0gKi9cbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSB7XG4gICAgICAgICAgdHlwZTogJ1Byb3BlcnR5JyxcbiAgICAgICAgICBraW5kOiAnaW5pdCcsXG4gICAgICAgICAgc2hvcnRoYW5kOlxuICAgICAgICAgICAga2V5LnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJlxuICAgICAgICAgICAgdmFsdWUudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmXG4gICAgICAgICAgICBrZXkubmFtZSA9PT0gdmFsdWUubmFtZSxcbiAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGUoc3BlY2lmaWVyLCBwcm9wZXJ0eSlcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5XG4gICAgICB9KVxuICAgIH0sXG4gICAgaW5pdDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG4gICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllci5sb2NhbC5uYW1lfVxuICAgICAgOiBpbml0XG4gIH0pXG5cbiAgcmV0dXJuIGRlY2xhcmF0aW9uc1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {Expression} from 'estree-jsx'\n */\n\n\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nfunction toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC10by1iaW5hcnktYWRkaXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLFlBQVksWUFBWTtBQUN4Qjs7QUFFbUM7O0FBRW5DO0FBQ0EsV0FBVywyQkFBMkI7QUFDdEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLHdCQUF3QjtBQUNyQzs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFzRDtBQUN6RTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1I7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJvbnplL2NvZGluZy9mc2FrbS9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC10by1iaW5hcnktYWRkaXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtFeHByZXNzaW9ufSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PEV4cHJlc3Npb24+fSBleHByZXNzaW9uc1xuICogICBFeHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBBZGRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmluYXJ5QWRkaXRpb24oZXhwcmVzc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbGVmdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uc1tpbmRleF1cbiAgICBsZWZ0ID0gbGVmdCA/IHt0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wZXJhdG9yOiAnKycsIHJpZ2h0fSA6IHJpZ2h0XG4gIH1cblxuICBhc3NlcnQobGVmdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgZXhwcmVzc2lvbnNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBsZWZ0XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @import {\n      Identifier,\n      JSXIdentifier,\n      JSXMemberExpression,\n      Literal,\n      MemberExpression\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nfunction toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nfunction toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRW1DO0FBQ29DOztBQUV2RTtBQUNBLFdBQVcsZ0NBQWdDO0FBQzNDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSxxREFBcUQ7QUFDbEU7O0FBRUE7QUFDQTtBQUNBLGVBQWUsc0JBQXNCO0FBQ3JDO0FBQ0Esa0NBQWtDLG9FQUFnQjtBQUNsRCxXQUFXO0FBQ1gsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsMENBQU07QUFDUixFQUFFLDJDQUFNO0FBQ1I7QUFDQTs7QUFFQTtBQUNBLFdBQVcsZ0NBQWdDO0FBQzNDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSxpREFBaUQ7QUFDOUQ7O0FBRUE7QUFDQTtBQUNBLElBQUksMkNBQU07QUFDVixrQ0FBa0Msb0VBQWdCLFFBQVEsVUFBVTtBQUNwRTtBQUNBOztBQUVBLGVBQWUsZUFBZTtBQUM5QixnQkFBZ0I7QUFDaEIsdUJBQXVCLG1EQUFtRDtBQUMxRTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1I7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJvbnplL2NvZGluZy9mc2FrbS9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICAgICAgSWRlbnRpZmllcixcbiAgICAgIEpTWElkZW50aWZpZXIsXG4gICAgICBKU1hNZW1iZXJFeHByZXNzaW9uLFxuICAgICAgTGl0ZXJhbCxcbiAgICAgIE1lbWJlckV4cHJlc3Npb25cbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtuYW1lIGFzIGlzSWRlbnRpZmllck5hbWV9IGZyb20gJ2VzdHJlZS11dGlsLWlzLWlkZW50aWZpZXItbmFtZSdcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8bnVtYmVyIHwgc3RyaW5nPn0gaWRzXG4gKiAgIElkZW50aWZpZXJzIChleGFtcGxlOiBgWydsaXN0JywgMF0pLlxuICogQHJldHVybnMge0lkZW50aWZpZXIgfCBNZW1iZXJFeHByZXNzaW9ufVxuICogICBJZGVudGlmaWVyIG9yIG1lbWJlciBleHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9JZE9yTWVtYmVyRXhwcmVzc2lvbihpZHMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbCB8IE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIC8qKiBAdHlwZSB7SWRlbnRpZmllciB8IExpdGVyYWx9ICovXG4gICAgY29uc3QgaWQgPVxuICAgICAgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIGlzSWRlbnRpZmllck5hbWUobmFtZSlcbiAgICAgICAgPyB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lfVxuICAgICAgICA6IHt0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiBuYW1lfVxuICAgIG9iamVjdCA9IG9iamVjdFxuICAgICAgPyB7XG4gICAgICAgICAgdHlwZTogJ01lbWJlckV4cHJlc3Npb24nLFxuICAgICAgICAgIG9iamVjdCxcbiAgICAgICAgICBwcm9wZXJ0eTogaWQsXG4gICAgICAgICAgY29tcHV0ZWQ6IGlkLnR5cGUgPT09ICdMaXRlcmFsJyxcbiAgICAgICAgICBvcHRpb25hbDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgOiBpZFxuICB9XG5cbiAgYXNzZXJ0KG9iamVjdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgaWRzYCB0byBiZSBwYXNzZWQnKVxuICBhc3NlcnQob2JqZWN0LnR5cGUgIT09ICdMaXRlcmFsJywgJ2V4cGVjdGVkIGlkZW50aWZpZXIgYXMgbGVmdC1tb3N0IHZhbHVlJylcbiAgcmV0dXJuIG9iamVjdFxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0pzeElkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0pTWElkZW50aWZpZXIgfCBKU1hNZW1iZXJFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgb2JqZWN0XG5cbiAgd2hpbGUgKCsraW5kZXggPCBpZHMubGVuZ3RoKSB7XG4gICAgY29uc3QgbmFtZSA9IGlkc1tpbmRleF1cbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lLCB7anN4OiB0cnVlfSksXG4gICAgICAnZXhwZWN0ZWQgdmFsaWQganN4IGlkZW50aWZpZXIsIG5vdCBgJyArIG5hbWUgKyAnYCdcbiAgICApXG5cbiAgICAvKiogQHR5cGUge0pTWElkZW50aWZpZXJ9ICovXG4gICAgY29uc3QgaWQgPSB7dHlwZTogJ0pTWElkZW50aWZpZXInLCBuYW1lfVxuICAgIG9iamVjdCA9IG9iamVjdCA/IHt0eXBlOiAnSlNYTWVtYmVyRXhwcmVzc2lvbicsIG9iamVjdCwgcHJvcGVydHk6IGlkfSA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBvYmplY3Rcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ })

};
;