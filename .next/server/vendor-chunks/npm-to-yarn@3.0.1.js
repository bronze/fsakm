"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/npm-to-yarn@3.0.1";
exports.ids = ["vendor-chunks/npm-to-yarn@3.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/npm-to-yarn@3.0.1/node_modules/npm-to-yarn/dist/npm-to-yarn.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/npm-to-yarn@3.0.1/node_modules/npm-to-yarn/dist/npm-to-yarn.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ convert)\n/* harmony export */ });\nvar unchangedCLICommands = [\n    'test',\n    'login',\n    'logout',\n    'link',\n    'unlink',\n    'publish',\n    'cache',\n    'start',\n    'stop',\n    'test'\n];\nvar yarnCLICommands = [\n    'init',\n    'run',\n    'add',\n    'audit',\n    'autoclean',\n    'bin',\n    'check',\n    'config',\n    'create',\n    'dedupe',\n    'generate-lock-entry',\n    'global',\n    'help',\n    'import',\n    'info',\n    'install',\n    'licenses',\n    'list',\n    'lockfile',\n    'outdated',\n    'owner',\n    'pack',\n    'policies',\n    'prune',\n    'remove',\n    'self-update',\n    'tag',\n    'team',\n    'upgrade',\n    'upgrade-interactive',\n    'version',\n    'versions',\n    'why',\n    'workspace',\n    'workspaces'\n];\nvar executorCommands = {\n    npm: 'npx',\n    yarn: 'yarn dlx',\n    pnpm: 'pnpm dlx',\n    bun: 'bun x'\n};\n\nfunction parse(command) {\n    var args = [];\n    var lastQuote = false;\n    var escaped = false;\n    var part = '';\n    for (var i = 0; i < command.length; ++i) {\n        var char = command.charAt(i);\n        if (char === '\\\\') {\n            part += char;\n            escaped = true;\n        }\n        else {\n            if (char === ' ' && !lastQuote) {\n                args.push(part);\n                part = '';\n            }\n            else if (!escaped && (char === '\"' || char === \"'\")) {\n                part += char;\n                if (char === lastQuote) {\n                    lastQuote = false;\n                }\n                else if (!lastQuote) {\n                    lastQuote = char;\n                }\n            }\n            else {\n                part += char;\n            }\n            escaped = false;\n        }\n    }\n    args.push(part);\n    return args;\n}\n\nfunction convertAddRemoveArgs(args) {\n    return args.map(function (item) {\n        switch (item) {\n            case '--no-lockfile':\n                return '--no-package-lock';\n            case '--production':\n                return '--save-prod';\n            case '--dev':\n                return '--save-dev';\n            case '--optional':\n                return '--save-optional';\n            case '--exact':\n                return '--save-exact';\n            default:\n                return item;\n        }\n    });\n}\nvar yarnToNpmTable = {\n    add: function (args) {\n        if (args.length === 2 && args[1] === '--force') {\n            return ['rebuild'];\n        }\n        args[0] = 'install';\n        return convertAddRemoveArgs(args);\n    },\n    remove: function (args) {\n        args[0] = 'uninstall';\n        return convertAddRemoveArgs(args);\n    },\n    version: function (args) {\n        return args.map(function (item) {\n            switch (item) {\n                case '--major':\n                    return 'major';\n                case '--minor':\n                    return 'minor';\n                case '--patch':\n                    return 'patch';\n                default:\n                    return item;\n            }\n        });\n    },\n    install: 'install',\n    list: function (args) {\n        args[0] = 'ls';\n        var patternIndex = args.findIndex(function (item) { return item === '--pattern'; });\n        if (patternIndex >= 0 && args[patternIndex + 1]) {\n            var packages = args[patternIndex + 1].replace(/[\"']([^\"']+)[\"']/, '$1').split('|');\n            args.splice(patternIndex, 2, packages.join(' '));\n        }\n        return args;\n    },\n    init: 'init',\n    create: 'init',\n    outdated: 'outdated',\n    run: 'run',\n    global: function (args) {\n        switch (args[1]) {\n            case 'add':\n                args.shift();\n                args = yarnToNpmTable.add(args);\n                args.push('--global');\n                return args;\n            case 'remove':\n                args.shift();\n                args = yarnToNpmTable.remove(args);\n                args.push('--global');\n                return args;\n            case 'list':\n                args.shift();\n                args = yarnToNpmTable.list(args);\n                args.push('--global');\n                return args;\n            // case 'bin':\n            // case 'upgrade':\n            default:\n                args.push(\"\\n# couldn't auto-convert command\");\n                return args;\n        }\n    },\n    pack: function (args) {\n        return args.map(function (item) {\n            if (item === '--filename') {\n                return '--pack-destination';\n            }\n            return item;\n        });\n    }\n};\nfunction yarnToNPM(_m, command) {\n    command = (command || '').trim();\n    if (command === '') {\n        return 'npm install';\n    }\n    var args = parse(command);\n    var firstCommand = (/\\w+/.exec(command) || [''])[0];\n    if (unchangedCLICommands.includes(args[0])) {\n        return 'npm ' + command;\n    }\n    else if (args[0] in yarnToNpmTable) {\n        var converter = yarnToNpmTable[args[0]];\n        if (typeof converter === 'function') {\n            args = converter(args);\n        }\n        else {\n            args[0] = converter;\n        }\n        return 'npm ' + args.filter(Boolean).join(' ');\n    }\n    else if (!yarnCLICommands.includes(firstCommand)) {\n        // i.e., yarn grunt -> npm run grunt\n        return 'npm run ' + command;\n    }\n    else {\n        return 'npm ' + command + \"\\n# couldn't auto-convert command\";\n    }\n}\n\nfunction convertInstallArgs$1(args) {\n    if (args.includes('--global') || args.includes('-g')) {\n        args.unshift('global');\n    }\n    return args.map(function (item) {\n        switch (item) {\n            case '--save-dev':\n            case '-D':\n                return '--dev';\n            case '--save-prod':\n            case '-P':\n                return '--production';\n            case '--no-package-lock':\n                return '--no-lockfile';\n            case '--save-optional':\n            case '-O':\n                return '--optional';\n            case '--save-exact':\n            case '-E':\n                return '--exact';\n            case '--save':\n            case '-S':\n            case '--global':\n            case '-g':\n                return '';\n            default:\n                return item;\n        }\n    });\n}\nvar npmToYarnTable = {\n    install: function (args) {\n        if (args.length === 1) {\n            return ['install'];\n        }\n        args[0] = 'add';\n        return convertInstallArgs$1(args);\n    },\n    i: function (args) {\n        return npmToYarnTable.install(args);\n    },\n    uninstall: function (args) {\n        args[0] = 'remove';\n        return convertInstallArgs$1(args);\n    },\n    un: function (args) {\n        return npmToYarnTable.uninstall(args);\n    },\n    remove: function (args) {\n        return npmToYarnTable.uninstall(args);\n    },\n    r: function (args) {\n        return npmToYarnTable.uninstall(args);\n    },\n    rm: function (args) {\n        return npmToYarnTable.uninstall(args);\n    },\n    version: function (args) {\n        return args.map(function (item) {\n            switch (item) {\n                case 'major':\n                    return '--major';\n                case 'minor':\n                    return '--minor';\n                case 'patch':\n                    return '--patch';\n                default:\n                    return item;\n            }\n        });\n    },\n    rb: function (args) {\n        return npmToYarnTable.rebuild(args);\n    },\n    rebuild: function (args) {\n        args[0] = 'add';\n        args.push('--force');\n        return args;\n    },\n    run: function (args) {\n        if (args[1] && !unchangedCLICommands.includes(args[1]) && !yarnCLICommands.includes(args[1])) {\n            args.splice(0, 1);\n        }\n        return args;\n    },\n    exec: function (args) {\n        args[0] = 'run';\n        return npmToYarnTable.run(args);\n    },\n    ls: function (args) {\n        args[0] = 'list';\n        var ended = false;\n        var packages = args.filter(function (item, id) {\n            if (id > 0 && !ended) {\n                ended = item.startsWith('-');\n                return !ended;\n            }\n            return false;\n        });\n        if (packages.length > 0) {\n            args.splice(1, packages.length, '--pattern', '\"' + packages.join('|') + '\"');\n        }\n        return args;\n    },\n    list: function (args) {\n        return npmToYarnTable.ls(args);\n    },\n    init: function (args) {\n        if (args[1] && !args[1].startsWith('-')) {\n            args[0] = 'create';\n            var m = args[1].match(/(.+)@latest/);\n            if (m) {\n                args[1] = m[1];\n            }\n        }\n        return args.filter(function (item) { return item !== '--scope'; });\n    },\n    create: function (args) {\n        return npmToYarnTable.init(args);\n    },\n    ln: 'link',\n    t: 'test',\n    tst: 'test',\n    outdated: 'outdated',\n    pack: function (args) {\n        return args.map(function (item) {\n            if (item.startsWith('--pack-destination')) {\n                return item.replace(/^--pack-destination[\\s=]/, '--filename ');\n            }\n            return item;\n        });\n    }\n};\nfunction npmToYarn(_m, command) {\n    var args = parse((command || '').trim());\n    var index = args.findIndex(function (a) { return a === '--'; });\n    if (index >= 0) {\n        args.splice(index, 1);\n    }\n    if (unchangedCLICommands.includes(args[0])) {\n        return 'yarn ' + args.filter(Boolean).join(' ');\n    }\n    else if (args[0] in npmToYarnTable) {\n        var converter = npmToYarnTable[args[0]];\n        if (typeof converter === 'function') {\n            args = converter(args);\n        }\n        else {\n            args[0] = converter;\n        }\n        return 'yarn ' + args.filter(Boolean).join(' ');\n    }\n    else {\n        return 'npm ' + command + \"\\n# couldn't auto-convert command\";\n    }\n}\n\nfunction convertPnpmInstallArgs(args) {\n    return args.map(function (item) {\n        switch (item) {\n            case '--save':\n            case '-S':\n                return '';\n            case '--no-package-lock':\n                return '--frozen-lockfile';\n            // case '--save-dev':\n            // case '-D':\n            // case '--save-prod':\n            // case '-P':\n            // case '--save-optional':\n            // case '-O':\n            // case '--save-exact':\n            // case '-E':\n            // case '--global':\n            // case '-g':\n            default:\n                return item;\n        }\n    });\n}\nfunction convertFilterArg(args) {\n    if (args.length > 1) {\n        var filter = args.filter(function (item, index) { return index !== 0 && !item.startsWith('-'); });\n        if (filter.length > 0) {\n            args = args.filter(function (item, index) { return index === 0 || item.startsWith('-'); });\n            args.push('--filter');\n            args.push(filter.join(' '));\n        }\n    }\n    return args;\n}\nvar npmToPnpmTable = {\n    // ------------------------------\n    install: function (args) {\n        if (args.length > 1 && args.filter(function (item) { return !item.startsWith('-'); }).length > 1) {\n            args[0] = 'add';\n        }\n        return convertPnpmInstallArgs(args);\n    },\n    i: function (args) {\n        return npmToPnpmTable.install(args);\n    },\n    // ------------------------------\n    uninstall: function (args) {\n        args[0] = 'remove';\n        return convertPnpmInstallArgs(args);\n    },\n    un: function (args) {\n        return npmToPnpmTable.uninstall(args);\n    },\n    remove: function (args) {\n        return npmToPnpmTable.uninstall(args);\n    },\n    r: function (args) {\n        return npmToPnpmTable.uninstall(args);\n    },\n    rm: function (args) {\n        return npmToPnpmTable.uninstall(args);\n    },\n    // ------------------------------\n    rb: function (args) {\n        return npmToPnpmTable.rebuild(args);\n    },\n    rebuild: function (args) {\n        args[0] = 'rebuild';\n        return convertFilterArg(args);\n    },\n    run: 'run',\n    exec: 'exec',\n    ls: function (args) {\n        return npmToPnpmTable.list(args);\n    },\n    list: function (args) {\n        return args.map(function (item) {\n            if (item.startsWith('--depth=')) {\n                return \"--depth \".concat(item.split('=')[1]);\n            }\n            switch (item) {\n                case '--production':\n                    return '--prod';\n                case '--development':\n                    return '--dev';\n                default:\n                    return item;\n            }\n        });\n    },\n    init: function (args) {\n        if (args[1] && !args[1].startsWith('-')) {\n            args[0] = 'create';\n            var m = args[1].match(/(.+)@latest/);\n            if (m) {\n                args[1] = m[1];\n            }\n        }\n        return args.filter(function (item) { return item !== '--scope'; });\n    },\n    create: function (args) {\n        return npmToPnpmTable.init(args);\n    },\n    ln: 'link',\n    t: 'test',\n    test: 'test',\n    tst: 'test',\n    start: 'start',\n    link: 'link',\n    unlink: function (args) {\n        return convertFilterArg(args);\n    },\n    outdated: 'outdated',\n    pack: function (args) {\n        return args.map(function (item) {\n            if (item.startsWith('--pack-destination')) {\n                return item.replace(/^--pack-destination[\\s=]/, '--pack-destination ');\n            }\n            return item;\n        });\n    }\n};\nfunction npmToPnpm(_m, command) {\n    var args = parse((command || '').trim());\n    var index = args.findIndex(function (a) { return a === '--'; });\n    if (index >= 0) {\n        args.splice(index, 1);\n    }\n    if (args[0] in npmToPnpmTable) {\n        var converter = npmToPnpmTable[args[0]];\n        if (typeof converter === 'function') {\n            args = converter(args);\n        }\n        else {\n            args[0] = converter;\n        }\n        return 'pnpm ' + args.filter(Boolean).join(' ');\n    }\n    else {\n        return 'npm ' + command + \"\\n# couldn't auto-convert command\";\n    }\n}\n\nfunction convertInstallArgs(args) {\n    // bun uses -g and --global flags\n    // bun mostly conforms to Yarn's CLI\n    return args.map(function (item) {\n        switch (item) {\n            case '--save-dev':\n            case '--development':\n            case '-D':\n                return '--dev';\n            case '--save-prod':\n            case '-P':\n                return '--production';\n            case '--no-package-lock':\n                return '--no-save';\n            case '--save-optional':\n            case '-O':\n                return '--optional';\n            case '--save-exact':\n            case '-E':\n                return '--exact';\n            case '--save':\n            case '-S':\n                // this is default in bun\n                return '';\n            case '--global':\n            case '-g':\n                return '--global';\n            default:\n                return item;\n        }\n    });\n}\nfunction npmToBun(_m, command) {\n    var args = parse((command || '').trim());\n    var index = args.findIndex(function (a) { return a === '--'; });\n    if (index >= 0) {\n        args.splice(index, 1);\n    }\n    var cmd = 'bun';\n    switch (args[0]) {\n        case 'install':\n        case 'i':\n            if (args.length === 1) {\n                args = ['install'];\n            }\n            else {\n                args[0] = 'add';\n            }\n            args = convertInstallArgs(args);\n            break;\n        case 'uninstall':\n        case 'un':\n        case 'remove':\n        case 'r':\n        case 'rm':\n            args[0] = 'remove';\n            args = convertInstallArgs(args);\n            break;\n        case 'cache':\n            if (args[1] === 'clean') {\n                args = ['pm', 'cache', 'rm'].concat(args.slice(2));\n            }\n            else {\n                cmd = 'npm';\n            }\n            break;\n        case 'rebuild':\n        case 'rb':\n            args[0] = 'add';\n            args.push('--force');\n            break;\n        case 'run':\n            break;\n        case 'list':\n        case 'ls':\n            // 'npm ls' => 'bun pm ls'\n            args = convertInstallArgs(args);\n            args[0] = 'ls';\n            args.unshift('pm');\n            break;\n        case 'init':\n        case 'create':\n            if (args[1]) {\n                if (args[1].startsWith('@')) {\n                    cmd = 'bunx';\n                    args[1] = args[1].replace('/', '/create-');\n                    args = args.slice(1);\n                }\n                else if (!args[1].startsWith('-')) {\n                    cmd = 'bunx';\n                    args[1] = \"create-\".concat(args[1].replace('@latest', ''));\n                    args = args.slice(1);\n                }\n                else {\n                    args[0] = 'init';\n                }\n            }\n            break;\n        case 'link':\n        case 'ln':\n            args = convertInstallArgs(args);\n            args[0] = 'link';\n            break;\n        case 'stop':\n        case 'start':\n        case 'unlink':\n            break;\n        case 'test':\n        case 't':\n        case 'tst':\n            args[0] = 'test';\n            args.unshift('run');\n            break;\n        case 'exec':\n            cmd = 'bunx';\n            args.splice(0, 1);\n            break;\n        default:\n            // null == keep `npm` command\n            cmd = 'npm';\n            break;\n    }\n    var filtered = args.filter(Boolean).filter(function (arg) { return arg !== '--'; });\n    return \"\".concat(cmd, \" \").concat(filtered.join(' ')).concat(cmd === 'npm' ? \"\\n# couldn't auto-convert command\" : '').replace('=', ' ');\n}\n\n/**\n * Converts between npm and yarn command\n */\nfunction convert(str, to) {\n    if (str.includes('npx') ||\n        str.includes('yarn dlx') ||\n        str.includes('pnpm dlx') ||\n        str.includes('bun x')) {\n        var executor = str.includes('npx')\n            ? 'npx'\n            : str.includes('yarn dlx')\n                ? 'yarn dlx'\n                : str.includes('pnpm dlx')\n                    ? 'pnpm dlx'\n                    : 'bun x';\n        return str.replace(executor, executorCommands[to]);\n    }\n    else if (to === 'npm') {\n        return str.replace(/yarn(?: +([^&\\n\\r]*))?/gm, yarnToNPM);\n    }\n    else if (to === 'pnpm') {\n        return str.replace(/npm(?: +([^&\\n\\r]*))?/gm, npmToPnpm);\n    }\n    else if (to === 'bun') {\n        return str.replace(/npm(?: +([^&\\n\\r]*))?/gm, npmToBun);\n    }\n    else {\n        return str.replace(/npm(?: +([^&\\n\\r]*))?/gm, npmToYarn);\n    }\n}\n\n\n//# sourceMappingURL=npm-to-yarn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/npm-to-yarn@3.0.1/node_modules/npm-to-yarn/dist/npm-to-yarn.mjs\n");

/***/ })

};
;