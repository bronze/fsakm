"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0";
exports.ids = ["vendor-chunks/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/esm/embla-carousel-class-names.esm.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/esm/embla-carousel-class-names.esm.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ClassNames)\n/* harmony export */ });\nconst defaultOptions = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n  loop: 'is-loop'\n};\n\nfunction normalizeClassNames(classNames) {\n  const normalized = Array.isArray(classNames) ? classNames : [classNames];\n  return normalized.filter(Boolean);\n}\nfunction removeClass(node, classNames) {\n  if (!node || !classNames.length) return;\n  node.classList.remove(...classNames);\n}\nfunction addClass(node, classNames) {\n  if (!node || !classNames.length) return;\n  node.classList.add(...classNames);\n}\n\nfunction ClassNames(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let root;\n  let slides;\n  let snappedIndexes = [];\n  let inViewIndexes = [];\n  const selectedEvents = ['select'];\n  const draggingEvents = ['pointerDown', 'pointerUp'];\n  const inViewEvents = ['slidesInView'];\n  const classNames = {\n    snapped: [],\n    inView: [],\n    draggable: [],\n    dragging: [],\n    loop: []\n  };\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    root = emblaApi.rootNode();\n    slides = emblaApi.slideNodes();\n    const {\n      watchDrag,\n      loop\n    } = emblaApi.internalEngine().options;\n    const isDraggable = !!watchDrag;\n    if (options.loop && loop) {\n      classNames.loop = normalizeClassNames(options.loop);\n      addClass(root, classNames.loop);\n    }\n    if (options.draggable && isDraggable) {\n      classNames.draggable = normalizeClassNames(options.draggable);\n      addClass(root, classNames.draggable);\n    }\n    if (options.dragging) {\n      classNames.dragging = normalizeClassNames(options.dragging);\n      draggingEvents.forEach(evt => emblaApi.on(evt, toggleDraggingClass));\n    }\n    if (options.snapped) {\n      classNames.snapped = normalizeClassNames(options.snapped);\n      selectedEvents.forEach(evt => emblaApi.on(evt, toggleSnappedClasses));\n      toggleSnappedClasses();\n    }\n    if (options.inView) {\n      classNames.inView = normalizeClassNames(options.inView);\n      inViewEvents.forEach(evt => emblaApi.on(evt, toggleInViewClasses));\n      toggleInViewClasses();\n    }\n  }\n  function destroy() {\n    draggingEvents.forEach(evt => emblaApi.off(evt, toggleDraggingClass));\n    selectedEvents.forEach(evt => emblaApi.off(evt, toggleSnappedClasses));\n    inViewEvents.forEach(evt => emblaApi.off(evt, toggleInViewClasses));\n    removeClass(root, classNames.loop);\n    removeClass(root, classNames.draggable);\n    removeClass(root, classNames.dragging);\n    toggleSlideClasses([], snappedIndexes, classNames.snapped);\n    toggleSlideClasses([], inViewIndexes, classNames.inView);\n    Object.keys(classNames).forEach(classNameKey => {\n      const key = classNameKey;\n      classNames[key] = [];\n    });\n  }\n  function toggleDraggingClass(_, evt) {\n    const toggleClass = evt === 'pointerDown' ? addClass : removeClass;\n    toggleClass(root, classNames.dragging);\n  }\n  function toggleSlideClasses(addClassIndexes = [], removeClassIndexes = [], classNames) {\n    const removeClassSlides = removeClassIndexes.map(index => slides[index]);\n    const addClassSlides = addClassIndexes.map(index => slides[index]);\n    removeClassSlides.forEach(slide => removeClass(slide, classNames));\n    addClassSlides.forEach(slide => addClass(slide, classNames));\n    return addClassIndexes;\n  }\n  function toggleSnappedClasses() {\n    const {\n      slideRegistry\n    } = emblaApi.internalEngine();\n    const newSnappedIndexes = slideRegistry[emblaApi.selectedScrollSnap()];\n    snappedIndexes = toggleSlideClasses(newSnappedIndexes, snappedIndexes, classNames.snapped);\n  }\n  function toggleInViewClasses() {\n    const newInViewIndexes = emblaApi.slidesInView();\n    inViewIndexes = toggleSlideClasses(newInViewIndexes, inViewIndexes, classNames.inView);\n  }\n  const self = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  };\n  return self;\n}\nClassNames.globalOptions = undefined;\n\n\n//# sourceMappingURL=embla-carousel-class-names.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZW1ibGEtY2Fyb3VzZWwtY2xhc3MtbmFtZXNAOC42LjBfZW1ibGEtY2Fyb3VzZWxAOC42LjAvbm9kZV9tb2R1bGVzL2VtYmxhLWNhcm91c2VsLWNsYXNzLW5hbWVzL2VzbS9lbWJsYS1jYXJvdXNlbC1jbGFzcy1uYW1lcy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9ob21lL2Jyb256ZS9jb2RpbmcvZnNha20vbm9kZV9tb2R1bGVzLy5wbnBtL2VtYmxhLWNhcm91c2VsLWNsYXNzLW5hbWVzQDguNi4wX2VtYmxhLWNhcm91c2VsQDguNi4wL25vZGVfbW9kdWxlcy9lbWJsYS1jYXJvdXNlbC1jbGFzcy1uYW1lcy9lc20vZW1ibGEtY2Fyb3VzZWwtY2xhc3MtbmFtZXMuZXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhY3RpdmU6IHRydWUsXG4gIGJyZWFrcG9pbnRzOiB7fSxcbiAgc25hcHBlZDogJ2lzLXNuYXBwZWQnLFxuICBpblZpZXc6ICdpcy1pbi12aWV3JyxcbiAgZHJhZ2dhYmxlOiAnaXMtZHJhZ2dhYmxlJyxcbiAgZHJhZ2dpbmc6ICdpcy1kcmFnZ2luZycsXG4gIGxvb3A6ICdpcy1sb29wJ1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc05hbWVzKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBBcnJheS5pc0FycmF5KGNsYXNzTmFtZXMpID8gY2xhc3NOYW1lcyA6IFtjbGFzc05hbWVzXTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWQuZmlsdGVyKEJvb2xlYW4pO1xufVxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lcykge1xuICBpZiAoIW5vZGUgfHwgIWNsYXNzTmFtZXMubGVuZ3RoKSByZXR1cm47XG4gIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbn1cbmZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZXMpIHtcbiAgaWYgKCFub2RlIHx8ICFjbGFzc05hbWVzLmxlbmd0aCkgcmV0dXJuO1xuICBub2RlLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTmFtZXModXNlck9wdGlvbnMgPSB7fSkge1xuICBsZXQgb3B0aW9ucztcbiAgbGV0IGVtYmxhQXBpO1xuICBsZXQgcm9vdDtcbiAgbGV0IHNsaWRlcztcbiAgbGV0IHNuYXBwZWRJbmRleGVzID0gW107XG4gIGxldCBpblZpZXdJbmRleGVzID0gW107XG4gIGNvbnN0IHNlbGVjdGVkRXZlbnRzID0gWydzZWxlY3QnXTtcbiAgY29uc3QgZHJhZ2dpbmdFdmVudHMgPSBbJ3BvaW50ZXJEb3duJywgJ3BvaW50ZXJVcCddO1xuICBjb25zdCBpblZpZXdFdmVudHMgPSBbJ3NsaWRlc0luVmlldyddO1xuICBjb25zdCBjbGFzc05hbWVzID0ge1xuICAgIHNuYXBwZWQ6IFtdLFxuICAgIGluVmlldzogW10sXG4gICAgZHJhZ2dhYmxlOiBbXSxcbiAgICBkcmFnZ2luZzogW10sXG4gICAgbG9vcDogW11cbiAgfTtcbiAgZnVuY3Rpb24gaW5pdChlbWJsYUFwaUluc3RhbmNlLCBvcHRpb25zSGFuZGxlcikge1xuICAgIGVtYmxhQXBpID0gZW1ibGFBcGlJbnN0YW5jZTtcbiAgICBjb25zdCB7XG4gICAgICBtZXJnZU9wdGlvbnMsXG4gICAgICBvcHRpb25zQXRNZWRpYVxuICAgIH0gPSBvcHRpb25zSGFuZGxlcjtcbiAgICBjb25zdCBvcHRpb25zQmFzZSA9IG1lcmdlT3B0aW9ucyhkZWZhdWx0T3B0aW9ucywgQ2xhc3NOYW1lcy5nbG9iYWxPcHRpb25zKTtcbiAgICBjb25zdCBhbGxPcHRpb25zID0gbWVyZ2VPcHRpb25zKG9wdGlvbnNCYXNlLCB1c2VyT3B0aW9ucyk7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnNBdE1lZGlhKGFsbE9wdGlvbnMpO1xuICAgIHJvb3QgPSBlbWJsYUFwaS5yb290Tm9kZSgpO1xuICAgIHNsaWRlcyA9IGVtYmxhQXBpLnNsaWRlTm9kZXMoKTtcbiAgICBjb25zdCB7XG4gICAgICB3YXRjaERyYWcsXG4gICAgICBsb29wXG4gICAgfSA9IGVtYmxhQXBpLmludGVybmFsRW5naW5lKCkub3B0aW9ucztcbiAgICBjb25zdCBpc0RyYWdnYWJsZSA9ICEhd2F0Y2hEcmFnO1xuICAgIGlmIChvcHRpb25zLmxvb3AgJiYgbG9vcCkge1xuICAgICAgY2xhc3NOYW1lcy5sb29wID0gbm9ybWFsaXplQ2xhc3NOYW1lcyhvcHRpb25zLmxvb3ApO1xuICAgICAgYWRkQ2xhc3Mocm9vdCwgY2xhc3NOYW1lcy5sb29wKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZHJhZ2dhYmxlICYmIGlzRHJhZ2dhYmxlKSB7XG4gICAgICBjbGFzc05hbWVzLmRyYWdnYWJsZSA9IG5vcm1hbGl6ZUNsYXNzTmFtZXMob3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgICAgYWRkQ2xhc3Mocm9vdCwgY2xhc3NOYW1lcy5kcmFnZ2FibGUpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kcmFnZ2luZykge1xuICAgICAgY2xhc3NOYW1lcy5kcmFnZ2luZyA9IG5vcm1hbGl6ZUNsYXNzTmFtZXMob3B0aW9ucy5kcmFnZ2luZyk7XG4gICAgICBkcmFnZ2luZ0V2ZW50cy5mb3JFYWNoKGV2dCA9PiBlbWJsYUFwaS5vbihldnQsIHRvZ2dsZURyYWdnaW5nQ2xhc3MpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc25hcHBlZCkge1xuICAgICAgY2xhc3NOYW1lcy5zbmFwcGVkID0gbm9ybWFsaXplQ2xhc3NOYW1lcyhvcHRpb25zLnNuYXBwZWQpO1xuICAgICAgc2VsZWN0ZWRFdmVudHMuZm9yRWFjaChldnQgPT4gZW1ibGFBcGkub24oZXZ0LCB0b2dnbGVTbmFwcGVkQ2xhc3NlcykpO1xuICAgICAgdG9nZ2xlU25hcHBlZENsYXNzZXMoKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaW5WaWV3KSB7XG4gICAgICBjbGFzc05hbWVzLmluVmlldyA9IG5vcm1hbGl6ZUNsYXNzTmFtZXMob3B0aW9ucy5pblZpZXcpO1xuICAgICAgaW5WaWV3RXZlbnRzLmZvckVhY2goZXZ0ID0+IGVtYmxhQXBpLm9uKGV2dCwgdG9nZ2xlSW5WaWV3Q2xhc3NlcykpO1xuICAgICAgdG9nZ2xlSW5WaWV3Q2xhc3NlcygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGRyYWdnaW5nRXZlbnRzLmZvckVhY2goZXZ0ID0+IGVtYmxhQXBpLm9mZihldnQsIHRvZ2dsZURyYWdnaW5nQ2xhc3MpKTtcbiAgICBzZWxlY3RlZEV2ZW50cy5mb3JFYWNoKGV2dCA9PiBlbWJsYUFwaS5vZmYoZXZ0LCB0b2dnbGVTbmFwcGVkQ2xhc3NlcykpO1xuICAgIGluVmlld0V2ZW50cy5mb3JFYWNoKGV2dCA9PiBlbWJsYUFwaS5vZmYoZXZ0LCB0b2dnbGVJblZpZXdDbGFzc2VzKSk7XG4gICAgcmVtb3ZlQ2xhc3Mocm9vdCwgY2xhc3NOYW1lcy5sb29wKTtcbiAgICByZW1vdmVDbGFzcyhyb290LCBjbGFzc05hbWVzLmRyYWdnYWJsZSk7XG4gICAgcmVtb3ZlQ2xhc3Mocm9vdCwgY2xhc3NOYW1lcy5kcmFnZ2luZyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKFtdLCBzbmFwcGVkSW5kZXhlcywgY2xhc3NOYW1lcy5zbmFwcGVkKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoW10sIGluVmlld0luZGV4ZXMsIGNsYXNzTmFtZXMuaW5WaWV3KTtcbiAgICBPYmplY3Qua2V5cyhjbGFzc05hbWVzKS5mb3JFYWNoKGNsYXNzTmFtZUtleSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBjbGFzc05hbWVLZXk7XG4gICAgICBjbGFzc05hbWVzW2tleV0gPSBbXTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVEcmFnZ2luZ0NsYXNzKF8sIGV2dCkge1xuICAgIGNvbnN0IHRvZ2dsZUNsYXNzID0gZXZ0ID09PSAncG9pbnRlckRvd24nID8gYWRkQ2xhc3MgOiByZW1vdmVDbGFzcztcbiAgICB0b2dnbGVDbGFzcyhyb290LCBjbGFzc05hbWVzLmRyYWdnaW5nKTtcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVTbGlkZUNsYXNzZXMoYWRkQ2xhc3NJbmRleGVzID0gW10sIHJlbW92ZUNsYXNzSW5kZXhlcyA9IFtdLCBjbGFzc05hbWVzKSB7XG4gICAgY29uc3QgcmVtb3ZlQ2xhc3NTbGlkZXMgPSByZW1vdmVDbGFzc0luZGV4ZXMubWFwKGluZGV4ID0+IHNsaWRlc1tpbmRleF0pO1xuICAgIGNvbnN0IGFkZENsYXNzU2xpZGVzID0gYWRkQ2xhc3NJbmRleGVzLm1hcChpbmRleCA9PiBzbGlkZXNbaW5kZXhdKTtcbiAgICByZW1vdmVDbGFzc1NsaWRlcy5mb3JFYWNoKHNsaWRlID0+IHJlbW92ZUNsYXNzKHNsaWRlLCBjbGFzc05hbWVzKSk7XG4gICAgYWRkQ2xhc3NTbGlkZXMuZm9yRWFjaChzbGlkZSA9PiBhZGRDbGFzcyhzbGlkZSwgY2xhc3NOYW1lcykpO1xuICAgIHJldHVybiBhZGRDbGFzc0luZGV4ZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlU25hcHBlZENsYXNzZXMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVSZWdpc3RyeVxuICAgIH0gPSBlbWJsYUFwaS5pbnRlcm5hbEVuZ2luZSgpO1xuICAgIGNvbnN0IG5ld1NuYXBwZWRJbmRleGVzID0gc2xpZGVSZWdpc3RyeVtlbWJsYUFwaS5zZWxlY3RlZFNjcm9sbFNuYXAoKV07XG4gICAgc25hcHBlZEluZGV4ZXMgPSB0b2dnbGVTbGlkZUNsYXNzZXMobmV3U25hcHBlZEluZGV4ZXMsIHNuYXBwZWRJbmRleGVzLCBjbGFzc05hbWVzLnNuYXBwZWQpO1xuICB9XG4gIGZ1bmN0aW9uIHRvZ2dsZUluVmlld0NsYXNzZXMoKSB7XG4gICAgY29uc3QgbmV3SW5WaWV3SW5kZXhlcyA9IGVtYmxhQXBpLnNsaWRlc0luVmlldygpO1xuICAgIGluVmlld0luZGV4ZXMgPSB0b2dnbGVTbGlkZUNsYXNzZXMobmV3SW5WaWV3SW5kZXhlcywgaW5WaWV3SW5kZXhlcywgY2xhc3NOYW1lcy5pblZpZXcpO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgbmFtZTogJ2NsYXNzTmFtZXMnLFxuICAgIG9wdGlvbnM6IHVzZXJPcHRpb25zLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cbkNsYXNzTmFtZXMuZ2xvYmFsT3B0aW9ucyA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IHsgQ2xhc3NOYW1lcyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWJsYS1jYXJvdXNlbC1jbGFzcy1uYW1lcy5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/esm/embla-carousel-class-names.esm.js\n");

/***/ })

};
;